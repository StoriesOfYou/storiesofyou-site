{
  "name": "Storyboard Data",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "storyboard-data",
        "responseMode": "responseNode",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "session_token",
                "value": "={{ $json.query.session_token }}"
              }
            ]
          }
        }
      },
      "id": "webhook-storyboard-data",
      "name": "Webhook - Storyboard Data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [160, 48],
      "webhookId": "storyboard-data"
    },
    {
      "parameters": {
        "jsCode": "// Validate session token input\nconst sessionToken = $json.query?.session_token;\n\nif (!sessionToken) {\n  throw new Error('Session token is required');\n}\n\nreturn {\n  json: {\n    session_token: sessionToken\n  }\n};"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [384, 48]
    },
    {
      "parameters": {
        "operation": "getItem",
        "tableName": "storiesofyou-sessions",
        "key": {
          "session_token": "={{ $json.session_token }}"
        }
      },
      "id": "get-session",
      "name": "Get Session",
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [608, 48],
      "credentials": {
        "aws": {
          "id": "aws-credentials",
          "name": "AWS Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Validate session exists and is not expired\nconst sessionData = $json.Item;\n\nif (!sessionData) {\n  throw new Error('Invalid session token');\n}\n\n// Check if session is expired\nconst currentTime = new Date();\nconst expiresAt = new Date(sessionData.expires_at);\n\nif (currentTime > expiresAt) {\n  throw new Error('Session has expired. Please log in again.');\n}\n\n// Update last activity\nconst lastActivity = currentTime.toISOString();\n\nreturn {\n  json: {\n    email: sessionData.email,\n    session_token: sessionData.session_token,\n    created_at: sessionData.created_at,\n    expires_at: sessionData.expires_at,\n    last_activity: lastActivity\n  }\n};"
      },
      "id": "validate-session",
      "name": "Validate Session",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [832, 48]
    },
    {
      "parameters": {
        "operation": "updateItem",
        "tableName": "storiesofyou-sessions",
        "key": {
          "session_token": "={{ $('Validate Input').first().json.session_token }}"
        },
        "updateExpression": "SET last_activity = :last_activity",
        "expressionAttributeValues": {
          "last_activity": "={{ $json.last_activity }}"
        }
      },
      "id": "update-session-activity",
      "name": "Update Session Activity",
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [1056, 48],
      "credentials": {
        "aws": {
          "id": "aws-credentials",
          "name": "AWS Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "scan",
        "tableName": "storiesofyou-recordings",
        "filterExpression": "email = :email AND #status IN (:status1, :status2, :status3)",
        "expressionAttributeNames": {
          "#status": "status"
        },
        "expressionAttributeValues": {
          "email": "={{ $json.email }}",
          "status1": "completed",
          "status2": "generating",
          "status3": "transcribing"
        }
      },
      "id": "get-user-stories",
      "name": "Get User Stories",
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [608, 48],
      "credentials": {
        "aws": {
          "id": "aws-credentials",
          "name": "AWS Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process and format user stories for frontend\nconst stories = $json.Items || [];\nconst email = $('Update Session Activity').first().json.email;\n\n// Sort stories by creation date (newest first)\nconst sortedStories = stories.sort((a, b) => {\n  const dateA = new Date(a.created_at || 0);\n  const dateB = new Date(b.created_at || 0);\n  return dateB - dateA;\n});\n\n// Format stories for frontend display\nconst formattedStories = sortedStories.map(story => {\n  const status = story.status || 'unknown';\n  let statusText = 'Processing';\n  let statusColor = 'blue';\n  \n  switch (status) {\n    case 'completed':\n      statusText = 'Ready';\n      statusColor = 'green';\n      break;\n    case 'generating':\n      statusText = 'Creating Video';\n      statusColor = 'yellow';\n      break;\n    case 'transcribing':\n      statusText = 'Transcribing';\n      statusColor = 'blue';\n      break;\n    case 'rejected':\n      statusText = 'Content Not Suitable';\n      statusColor = 'red';\n      break;\n    default:\n      statusText = 'Processing';\n      statusColor = 'gray';\n  }\n  \n  return {\n    story_id: story.story_id,\n    name: story.name || 'Unknown',\n    prompt: story.prompt || 'No prompt',\n    status: status,\n    status_text: statusText,\n    status_color: statusColor,\n    story_url: story.story_url || null,\n    created_at: story.created_at,\n    updated_at: story.updated_at,\n    audio_duration: null, // Field not available in current schema\n    has_video: !!story.story_url\n  };\n});\n\n// Calculate summary statistics\nconst stats = {\n  total_stories: formattedStories.length,\n  completed_stories: formattedStories.filter(s => s.status === 'completed').length,\n  processing_stories: formattedStories.filter(s => ['generating', 'transcribing'].includes(s.status)).length,\n  rejected_stories: formattedStories.filter(s => s.status === 'rejected').length\n};\n\nreturn {\n  json: {\n    email: email,\n    stories: formattedStories,\n    stats: stats,\n    total_count: formattedStories.length\n  }\n};"
      },
      "id": "format-stories",
      "name": "Format Stories",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [832, 48]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"email\": \"{{ $json.email }}\",\n  \"stories\": {{ JSON.stringify($json.stories) }},\n  \"stats\": {{ JSON.stringify($json.stats) }},\n  \"total_count\": {{ $json.total_count }}\n}"
      },
      "id": "respond-success",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1056, 48]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"{{ $json.message || 'Unable to load your stories. Please try logging in again.' }}\",\n  \"error\": \"{{ $json.message || 'Authentication failed' }}\"\n}",
        "responseCode": 401
      },
      "id": "respond-error",
      "name": "Respond Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1056, 240]
    }
  ],
  "connections": {
    "Webhook - Storyboard Data": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Get Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Session": {
      "main": [
        [
          {
            "node": "Validate Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Session": {
      "main": [
        [
          {
            "node": "Update Session Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session Activity": {
      "main": [
        [
          {
            "node": "Get User Stories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Stories": {
      "main": [
        [
          {
            "node": "Format Stories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Stories": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:30:00.000Z",
  "versionId": "1"
}
