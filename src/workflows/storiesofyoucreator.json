{
  "name": "StoriesOfYouCreator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "storiesofyou-submit",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "48b71fb4-9f95-4d60-af5c-82ba3b77de2b",
      "name": "Webhook - Story Submitted",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        160,
        48
      ],
      "webhookId": "c93fcb7a-921a-4fc7-801d-fdb76ef64a87",
      "credentials": {
        "httpHeaderAuth": {
          "id": "5rWmmaEjEyDNEax3",
          "name": "Webhook Secret"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate unique story ID and prepare data for DynamoDB\nconst storyId = 'story-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\nconst currentTime = new Date().toISOString();\n\n// ===== CLOUDFRONT WEBHOOK DIAGNOSTICS =====\nconsole.log('=== CLOUDFRONT WEBHOOK DEBUG ===');\nconsole.log('Raw $json:', JSON.stringify($json, null, 2));\nconsole.log('Type of $json.body:', typeof $json.body);\nconsole.log('Headers received:', JSON.stringify($json.headers || {}, null, 2));\n\n// FIXED: Parse the JSON string that comes from CloudFront\nconst webhookData = typeof $json.body === 'string' ? JSON.parse($json.body) : ($json.body || {});\n\n// Log parsed data and check for missing fields\nconsole.log('Parsed webhookData:', JSON.stringify(webhookData, null, 2));\nconsole.log('Critical fields check:');\nconsole.log('- videoTargetLength:', webhookData.videoTargetLength);\nconsole.log('- videoTotalDuration:', webhookData.videoTotalDuration);\nconsole.log('- storyDurationSeconds:', webhookData.storyDurationSeconds);\nconsole.log('- musicDurationSeconds:', webhookData.musicDurationSeconds);\nconsole.log('=================================');\n\n// Required fields - use defaults if missing\nconst name = (webhookData.name && typeof webhookData.name === 'string' && webhookData.name.trim()) \n  ? webhookData.name.trim() \n  : 'Unknown';\n\nconst email = (webhookData.email && typeof webhookData.email === 'string' && webhookData.email.trim()) \n  ? webhookData.email.trim() \n  : '';\n\nconst audioKey = (webhookData.audio_key && typeof webhookData.audio_key === 'string' && webhookData.audio_key.trim()) \n  ? webhookData.audio_key.trim() \n  : '';\n\n// Optional fields - provide meaningful defaults instead of empty values\nconst prompt = (webhookData.prompt && typeof webhookData.prompt === 'string' && webhookData.prompt.trim()) \n  ? webhookData.prompt.trim() \n  : 'Share a story';\n\nconst photoKey = (webhookData.photo_key && typeof webhookData.photo_key === 'string' && webhookData.photo_key.trim()) \n  ? webhookData.photo_key.trim() \n  : 'default-story-image.jpg';\n\nconst userAgent = (webhookData.user_agent && typeof webhookData.user_agent === 'string' && webhookData.user_agent.trim()) \n  ? webhookData.user_agent.trim() \n  : '';\n\nconst recordedAt = (webhookData.recorded_at && typeof webhookData.recorded_at === 'string') \n  ? webhookData.recorded_at \n  : currentTime;\n\n// Build full S3 URL for audio (only if audio_key exists)\nconst audioUrl = audioKey ? `https://storiesofyou-incoming.s3.us-east-2.amazonaws.com/${audioKey}` : '';\n\n// Prepare data for DynamoDB - use empty strings for optional fields\n// DynamoDB expects these fields to always be present\nconst storyData = {\n  story_id: storyId,\n  name: name,\n  email: email,\n  prompt: prompt || '', // empty string if not provided\n  audio_key: audioKey,\n  photo_key: photoKey || '', // empty string if not provided  \n  audio_url: audioUrl,\n  status: 'submitted',\n  created_at: recordedAt,\n  updated_at: currentTime,\n  transcribe_job_name: storyId + '-transcription',\n  user_agent: userAgent || '' // empty string if not provided\n};\n\n// Log the prepared data for debugging\nconsole.log('Prepared story data:', JSON.stringify(storyData, null, 2));\n\n// Validate required fields\nif (!name || name === 'Unknown') {\n  throw new Error('Name is required');\n}\n\nif (!email) {\n  throw new Error('Email is required');\n}\n\nif (!audioKey) {\n  throw new Error('Audio key is required');\n}\n\nreturn {\n  json: storyData\n};"
      },
      "id": "36eb837f-f5cd-4caa-bd9e-7af02fe422a6",
      "name": "Prepare Story Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        48
      ]
    },
    {
      "parameters": {
        "amount": 60,
        "unit": "seconds"
      },
      "id": "5b1e032a-b4fb-4a42-b464-5593ff73d333",
      "name": "Wait for Transcription",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1504,
        48
      ],
      "webhookId": "3de56bac-ca35-4351-81e4-6af0654fa8e1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "transcription-complete",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2b9b6c96-2908-4dce-8280-77125e65928e",
      "name": "Is Transcription Complete?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1952,
        -32
      ]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "93c5a2cb-5175-4ba9-81fc-540a95d8a69c",
      "name": "Wait More",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        2192,
        144
      ],
      "webhookId": "3ed1d2ea-f923-44f9-933f-0ce067839ad6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "toxicity-check",
              "leftValue": "={{ parseFloat($json.toxicity_score) }}",
              "rightValue": 0.5,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ce4b5bf4-f8f6-47e5-bd8f-27e56a74e6e8",
      "name": "Is Story Clean? (Toxicity ≤ 0.5)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2624,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "// FIXED Generate Story Page HTML - with absolute URLs for OG and favicon\n// Critical fixes: Using S3 URLs for favicon and OG image\n\nconst data = $json;\n\n// Data extraction logic (keeping your existing logic)\nlet safeName = 'Someone';\nlet safeEmail = '';\nlet safePrompt = '';\nlet safeTranscript = '';\nlet safeAudioKey = '';\nlet safePhotoKey = '';\nlet safeCreatedAt = new Date().toISOString();\nlet safeStoryId = 'story-' + Date.now();\nlet audioUrl = '';\n\n// Try to get data from current node first\nconst userData = data.body || data;\nsafeName = userData.name || data.name || safeName;\nsafeEmail = safeEmail === '' ? (userData.email || data.email || safeEmail) : safeEmail;\nsafePrompt = safePrompt === '' ? (userData.prompt || data.prompt || safePrompt) : safePrompt;\nsafeAudioKey = safeAudioKey === '' ? (userData.audio_key || data.audio_key || safeAudioKey) : safeAudioKey;\nsafePhotoKey = safePhotoKey === '' ? (userData.photo_key || data.photo_key || safePhotoKey) : safePhotoKey;\nsafeCreatedAt = userData.recorded_at || data.created_at || safeCreatedAt;\nsafeStoryId = data.story_id || safeStoryId;\naudioUrl = data.audio_url || userData.audio_url || audioUrl;\n\n// Get data from previous nodes (keeping your existing logic)\ntry {\n  const prepareNode = $('Prepare Story Data').first().json;\n  if (prepareNode) {\n    safeName = safeName === 'Someone' ? (prepareNode.name || safeName) : safeName;\n    safeEmail = safeEmail === '' ? (prepareNode.email || safeEmail) : safeEmail;\n    safePrompt = safePrompt === '' ? (prepareNode.prompt || safePrompt) : safePrompt;\n    safeAudioKey = safeAudioKey === '' ? (prepareNode.audio_key || safeAudioKey) : safeAudioKey;\n    safePhotoKey = safePhotoKey === '' ? (prepareNode.photo_key || safePhotoKey) : safePhotoKey;\n    safeCreatedAt = prepareNode.created_at || safeCreatedAt;\n    safeStoryId = prepareNode.story_id || safeStoryId;\n    audioUrl = audioUrl === '' ? (prepareNode.audio_url || audioUrl) : audioUrl;\n  }\n} catch (e) {\n  console.log('Could not access Prepare Story Data node');\n}\n\n// Build URLs\nif (audioUrl === '' && safeAudioKey !== '') {\n  audioUrl = `https://storiesofyou-incoming.s3.us-east-2.amazonaws.com/${safeAudioKey}`;\n}\n\n// FIXED: Remove .html extension from story ID for video URL construction\nconst baseStoryId = safeStoryId.replace('.html', '');\nconst videoUrl = `https://stories.storiesofyou.ai/videos/${baseStoryId}_complete.mp4`;\nconst storyTitle = safePrompt && safePrompt.trim() !== '' ? safePrompt : `${safeName}'s Story`;\n\n// Transcript processing (keeping your existing logic)\nlet originalTranscript = '';\nlet cleanedTranscript = '';\n\ntry {\n  const assemblyNode = $('Check AssemblyAI Status').first().json;\n  if (Array.isArray(assemblyNode) && assemblyNode[0] && assemblyNode[0].text) {\n    originalTranscript = assemblyNode[0].text;\n  } else if (assemblyNode && assemblyNode.text) {\n    originalTranscript = assemblyNode.text;\n  }\n} catch (e) {\n  console.log('Could not access AssemblyAI Status node:', e);\n}\n\ntry {\n  const claudeParserResponse = $('Parse Claude JSON').first().json;\n  if (claudeParserResponse && claudeParserResponse.cleaned_transcript) {\n    cleanedTranscript = claudeParserResponse.cleaned_transcript;\n  }\n} catch (e) {\n  console.log('Could not access Parse Claude JSON node:', e);\n}\n\nconst transcript = cleanedTranscript || originalTranscript || 'Transcript will be available soon.';\nconst originalForTabs = originalTranscript || 'Original transcript not available.';\n\n// Date formatting\nlet recordingDate;\ntry {\n  recordingDate = new Date(safeCreatedAt).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long', \n    day: 'numeric'\n  });\n} catch (error) {\n  recordingDate = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long', \n    day: 'numeric'\n  });\n}\n\n// CRITICAL FIX: Use S3 URLs for logo and favicon\nconst logoUrl = \"https://storiesofyou-stories.s3.us-east-2.amazonaws.com/logo.png\";\nconst faviconUrl = \"https://storiesofyou-stories.s3.us-east-2.amazonaws.com/favicon.ico\";\nconst cleanStoryUrl = `https://stories.storiesofyou.ai/${safeStoryId}.html`;\n\n// ENHANCED HTML template with FIXED favicon and OG image URLs\nconst storyTemplate = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${storyTitle} - Stories of You</title>\n    <meta name=\"description\" content=\"A personal story recorded and preserved forever in ${safeName}'s own voice.\">\n    \n    <!-- FIXED: Use absolute S3 URL for favicon -->\n    <link rel=\"icon\" href=\"${faviconUrl}\" />\n    <link rel=\"shortcut icon\" href=\"${faviconUrl}\" />\n    \n    <!-- FIXED: Use S3 URL for Open Graph image -->\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:site_name\" content=\"Stories of You\">\n    <meta property=\"og:title\" content=\"${storyTitle} - Stories of You\">\n    <meta property=\"og:description\" content=\"A personal story recorded and preserved forever in ${safeName}'s own voice.\">\n    <meta property=\"og:image\" content=\"${logoUrl}\">\n    <meta property=\"og:image:secure_url\" content=\"${logoUrl}\">\n    <meta property=\"og:image:width\" content=\"400\">\n    <meta property=\"og:image:height\" content=\"400\">\n    <meta property=\"og:image:type\" content=\"image/png\">\n    <meta property=\"og:image:alt\" content=\"Stories of You logo\">\n    <meta property=\"og:url\" content=\"${cleanStoryUrl}\">\n    \n    <!-- FIXED: Use S3 URL for Twitter Card image -->\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"${storyTitle} - Stories of You\">\n    <meta name=\"twitter:description\" content=\"A personal story preserved in ${safeName}'s voice\">\n    <meta name=\"twitter:image\" content=\"${logoUrl}\">\n    \n    <style>\n        :root {\n            --brand-navy: #0f2c4c;\n            --brand-orange: #e09a1b;\n            --brand-charcoal: #3d3528;\n            --warm-light: #faf3e7;\n            --warm-mid: #e0cba7;\n        }\n        \n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6; \n            color: #374151;\n            background: radial-gradient(1200px 500px at 50% -200px, #fff7e9 0%, #fce8c8 50%, #e0cba7 100%);\n            min-height: 100vh;\n        }\n        \n        .container {\n            max-width: 800px; \n            margin: 2rem auto; \n            padding: 2rem;\n            background: white; \n            box-shadow: 0 20px 40px rgba(0,0,0,0.1); \n            border-radius: 16px;\n        }\n        \n        .header { \n            text-align: center; \n            margin-bottom: 3rem; \n            padding-bottom: 2rem; \n            border-bottom: 2px solid #f3f4f6;\n        }\n        \n        .logo img { \n            height: 56px; \n            width: auto; \n            border-radius: 6px;\n            margin-bottom: 2rem;\n        }\n        \n        .story-title { \n            font-size: 2.75rem; \n            font-weight: 800; \n            color: var(--brand-navy); \n            margin-bottom: 0.75rem; \n            line-height: 1.1;\n        }\n        \n        .story-subtitle { \n            font-size: 1.25rem; \n            color: #6b7280; \n            font-style: italic;\n            font-weight: 500;\n        }\n        \n        .recording-date { \n            color: #6b7280; \n            font-size: 1rem; \n            margin-bottom: 2.5rem; \n            text-align: center;\n            font-weight: 500;\n            padding: 0.75rem 1.5rem;\n            background: rgba(15, 44, 76, 0.05);\n            border-radius: 25px;\n            display: inline-block;\n        }\n        \n        /* Video section */\n        .video-section { \n            background: linear-gradient(135deg, var(--warm-light) 0%, #f8f4e8 100%);\n            padding: 2.5rem; \n            border-radius: 20px; \n            margin: 3rem 0; \n            text-align: center; \n            border: 1px solid rgba(224, 203, 167, 0.3);\n            box-shadow: 0 8px 25px rgba(0,0,0,0.08);\n        }\n        \n        .video-container {\n            position: relative;\n            width: 100%; \n            max-width: 640px; \n            margin: 0 auto;\n            border-radius: 12px;\n            overflow: hidden;\n            box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n            background: #000;\n            aspect-ratio: 16 / 9;\n        }\n        \n        .video-player { \n            width: 100%; \n            height: 100%;\n            display: block;\n        }\n        \n        .video-loading {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            color: white;\n            font-size: 1.1rem;\n            z-index: 10;\n        }\n        \n        .video-error {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            color: white;\n            text-align: center;\n            z-index: 10;\n            padding: 2rem;\n            max-width: 90%;\n        }\n        \n        .video-error h3 {\n            margin-bottom: 1rem;\n            color: #fbbf24;\n        }\n        \n        .video-retry-btn {\n            background: var(--brand-orange);\n            color: white;\n            border: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 8px;\n            cursor: pointer;\n            margin-top: 1rem;\n            font-weight: 600;\n        }\n        \n        .video-retry-btn:hover {\n            background: #d4841c;\n        }\n        \n        .audio-fallback {\n            margin-top: 2rem;\n            padding-top: 2rem;\n            border-top: 1px solid rgba(224, 203, 167, 0.3);\n        }\n        \n        .audio-fallback-title {\n            font-size: 1.1rem;\n            font-weight: 600;\n            color: var(--brand-charcoal);\n            margin-bottom: 1rem;\n        }\n        \n        .audio-player audio {\n            width: 100%;\n            max-width: 500px;\n            border-radius: 12px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        }\n        \n        .transcript-section { \n            margin: 4rem 0; \n        }\n        \n        .transcript-header { \n            font-size: 1.875rem; \n            font-weight: 700; \n            color: var(--brand-navy); \n            margin-bottom: 2rem; \n            display: flex; \n            align-items: center; \n            gap: 1rem;\n        }\n        \n        .transcript-icon {\n            width: 44px;\n            height: 44px;\n            background: linear-gradient(135deg, var(--brand-orange) 0%, #d4841c 100%);\n            border-radius: 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 20px;\n            flex-shrink: 0;\n            box-shadow: 0 4px 15px rgba(224, 154, 27, 0.3);\n        }\n\n        .transcript-tabs {\n            display: flex;\n            gap: 0;\n            margin-bottom: 0;\n            border-radius: 12px 12px 0 0;\n            overflow: hidden;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.06);\n        }\n\n        .transcript-tab {\n            flex: 1;\n            padding: 1rem 1.5rem;\n            background: #f8f9fa;\n            border: none;\n            cursor: pointer;\n            font-size: 0.95rem;\n            font-weight: 600;\n            color: #6b7280;\n            transition: all 0.3s ease;\n            border-bottom: 3px solid transparent;\n        }\n\n        .transcript-tab:hover {\n            background: #f1f3f4;\n            color: var(--brand-charcoal);\n        }\n\n        .transcript-tab.active {\n            background: white;\n            color: var(--brand-navy);\n            border-bottom-color: var(--brand-orange);\n        }\n\n        .transcript-content {\n            background: white;\n            border-radius: 0 0 16px 16px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n            overflow: hidden;\n        }\n\n        .transcript-panel {\n            display: none;\n            padding: 2.5rem;\n            border-left: 6px solid var(--brand-orange);\n            font-size: 1.125rem;\n            line-height: 1.8;\n            color: var(--brand-charcoal);\n            background: linear-gradient(135deg, var(--warm-light) 0%, #f8f4e8 100%);\n        }\n\n        .transcript-panel.active {\n            display: block;\n        }\n\n        .transcript-panel.raw {\n            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n            border-left-color: #6c757d;\n            font-family: 'SF Mono', Monaco, monospace;\n            font-size: 1rem;\n            color: #495057;\n        }\n\n        .transcript-placeholder { \n            background: #f9fafb;\n            padding: 2.5rem; \n            border-radius: 16px; \n            border-left: 6px solid #d1d5db; \n            font-size: 1.125rem; \n            color: #6b7280; \n            font-style: italic;\n            text-align: center;\n        }\n        \n        .sharing-section { \n            background: linear-gradient(135deg, var(--brand-charcoal) 0%, #4a453b 100%);\n            color: white; \n            padding: 3rem 2.5rem; \n            border-radius: 20px; \n            text-align: center; \n            margin: 4rem 0;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n        \n        .share-url {\n            background: rgba(255,255,255,0.15); \n            padding: 1.25rem; \n            border-radius: 12px; \n            font-family: monospace; \n            font-size: 0.9rem; \n            word-break: break-all; \n            border: 2px solid rgba(255,255,255,0.2); \n            color: rgba(255,255,255,0.95);\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        \n        .footer { \n            text-align: center; \n            padding-top: 3rem; \n            border-top: 2px solid #f3f4f6; \n            color: #6b7280;\n            margin-top: 2rem;\n        }\n        \n        .footer-link { \n            color: var(--brand-navy); \n            text-decoration: none; \n            font-weight: 600; \n            padding: 0.5rem 1rem;\n            border-radius: 8px;\n            display: inline-block;\n        }\n        \n        @media (max-width: 768px) { \n            .container { margin: 1rem; padding: 1.5rem; }\n            .story-title { font-size: 2.25rem; }\n            .video-section { padding: 2rem 1.5rem; }\n            .transcript-panel { padding: 2rem; }\n            .sharing-section { padding: 2rem 1.5rem; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"logo\">\n                <a href=\"https://storiesofyou.ai\">\n                    <img src=\"${logoUrl}\" alt=\"Stories of You logo\" />\n                </a>\n            </div>\n            <h1 class=\"story-title\">${storyTitle}</h1>\n            <p class=\"story-subtitle\">A memory in ${safeName}'s voice</p>\n        </div>\n        \n        <div style=\"text-align: center;\">\n            <div class=\"recording-date\">Recorded on ${recordingDate}</div>\n        </div>\n        \n        <!-- Video section with iOS Safari fixes -->\n        <div class=\"video-section\">\n            <div class=\"video-container\">\n                <div class=\"video-loading\" id=\"videoLoading\">\n                    Loading your story video...\n                </div>\n                \n                <video \n                    class=\"video-player\" \n                    id=\"storyVideo\"\n                    controls \n                    preload=\"metadata\"\n                    playsinline\n                    webkit-playsinline\n                    style=\"display: none;\"\n                    onloadstart=\"handleVideoLoadStart()\"\n                    oncanplay=\"handleVideoCanPlay()\"\n                    onloadeddata=\"handleVideoLoaded()\"\n                    onerror=\"handleVideoError()\"\n                >\n                    <source src=\"${videoUrl}\" type=\"video/mp4\">\n                    <p>Your browser does not support video playback.</p>\n                </video>\n                \n                <div class=\"video-error\" id=\"videoError\" style=\"display: none;\">\n                    <h3>Video Still Processing</h3>\n                    <p>Your video is being generated and will be available shortly. Please try refreshing the page in a few minutes.</p>\n                    <button class=\"video-retry-btn\" onclick=\"retryVideo()\">Try Again</button>\n                </div>\n            </div>\n            \n            ${audioUrl ? `\n            <div class=\"audio-fallback\">\n                <p class=\"audio-fallback-title\">Original story audio</p>\n                <div class=\"audio-player\">\n                    <audio controls preload=\"metadata\">\n                        <source src=\"${audioUrl}\" type=\"audio/webm\">\n                        <source src=\"${audioUrl}\" type=\"audio/mp4\">\n                        <source src=\"${audioUrl}\" type=\"audio/wav\">\n                        <source src=\"${audioUrl}\" type=\"audio/mpeg\">\n                        <p>Audio playback not supported.</p>\n                    </audio>\n                </div>\n            </div>\n            ` : ''}\n        </div>\n        \n        <div class=\"transcript-section\">\n            <h2 class=\"transcript-header\">\n                <div class=\"transcript-icon\">📄</div>\n                Transcript\n            </h2>\n            \n            ${transcript === 'Transcript will be available soon.' ? `\n            <div class=\"transcript-placeholder\">\n                ${transcript}\n            </div>\n            ` : `\n            <div class=\"transcript-tabs\">\n                <button class=\"transcript-tab active\" onclick=\"switchTranscript('cleaned')\" id=\"cleaned-tab\">\n                    <span>✨</span> Enhanced\n                </button>\n                <button class=\"transcript-tab\" onclick=\"switchTranscript('raw')\" id=\"raw-tab\">\n                    <span>🎙️</span> Original\n                </button>\n            </div>\n            \n            <div class=\"transcript-content\">\n                <div class=\"transcript-panel active\" id=\"cleaned-panel\">\n                    ${transcript}\n                </div>\n                \n                <div class=\"transcript-panel raw\" id=\"raw-panel\">\n                    ${originalForTabs}\n                </div>\n            </div>\n            `}\n        </div>\n        \n        <div class=\"sharing-section\">\n            <h3>Share this story with family</h3>\n            <p>Share this link with family and friends:</p>\n            <div class=\"share-url\" onclick=\"copyToClipboard()\">${cleanStoryUrl}</div>\n            <p style=\"margin-top: 0.75rem; font-size: 0.875rem; opacity: 0.7;\">Click to copy</p>\n        </div>\n        \n        <div class=\"footer\">\n            <p><a href=\"https://storiesofyou.ai\" class=\"footer-link\">← Back to Stories of You</a></p>\n            <p style=\"margin-top: 1.5rem; font-style: italic; color: #9ca3af;\">Your voice, your story — preserved forever</p>\n        </div>\n    </div>\n    \n    <script>\n        let videoRetryAttempts = 0;\n        const maxRetries = 3;\n        \n        function handleVideoLoadStart() {\n            console.log('Video load started');\n            document.getElementById('videoLoading').style.display = 'block';\n            document.getElementById('videoError').style.display = 'none';\n        }\n        \n        function handleVideoLoaded() {\n            console.log('Video loaded successfully');\n            document.getElementById('videoLoading').style.display = 'none';\n            document.getElementById('storyVideo').style.display = 'block';\n        }\n        \n        function handleVideoCanPlay() {\n            console.log('Video can play');\n            document.getElementById('videoLoading').style.display = 'none';\n            document.getElementById('storyVideo').style.display = 'block';\n        }\n        \n        function handleVideoError() {\n            console.error('Video failed to load');\n            videoRetryAttempts++;\n            \n            if (videoRetryAttempts < maxRetries) {\n                console.log(\\`Retrying video load (attempt \\${videoRetryAttempts + 1}/\\${maxRetries})\\`);\n                setTimeout(() => {\n                    document.getElementById('storyVideo').load();\n                }, 2000);\n            } else {\n                showVideoError();\n            }\n        }\n        \n        function showVideoError() {\n            document.getElementById('videoLoading').style.display = 'none';\n            document.getElementById('videoError').style.display = 'block';\n        }\n        \n        function retryVideo() {\n            videoRetryAttempts = 0;\n            document.getElementById('videoError').style.display = 'none';\n            document.getElementById('videoLoading').style.display = 'block';\n            document.getElementById('storyVideo').load();\n        }\n        \n        function switchTranscript(type) {\n            document.querySelectorAll('.transcript-tab').forEach(tab => tab.classList.remove('active'));\n            document.querySelectorAll('.transcript-panel').forEach(panel => panel.classList.remove('active'));\n            \n            document.getElementById(type + '-tab').classList.add('active');\n            document.getElementById(type + '-panel').classList.add('active');\n        }\n        \n        function copyToClipboard() {\n            navigator.clipboard.writeText(window.location.href).then(() => {\n                const element = document.querySelector('.share-url');\n                const original = element.textContent;\n                element.textContent = '✓ Copied!';\n                element.style.background = 'rgba(34, 197, 94, 0.3)';\n                setTimeout(() => {\n                    element.textContent = original;\n                    element.style.background = 'rgba(255,255,255,0.15)';\n                }, 2000);\n            });\n        }\n        \n        // Check video availability on page load\n        document.addEventListener('DOMContentLoaded', function() {\n            const video = document.getElementById('storyVideo');\n            \n            // Set up video load timeout\n            setTimeout(() => {\n                if (video.readyState === 0) {\n                    console.log('Video not loaded after 10 seconds, showing error');\n                    showVideoError();\n                }\n            }, 10000);\n        });\n    </script>\n</body>\n</html>`;\n\n// CRITICAL FIX: Extract and exclude videoUrl from incoming data to prevent override\nconst { videoUrl: incomingVideoUrl, ...dataWithoutVideo } = data;\n\n// Log if there's a conflict for debugging\nif (incomingVideoUrl && incomingVideoUrl !== videoUrl) {\n  console.log('WARNING: Incoming videoUrl differs from constructed URL');\n  console.log('Incoming (ignored):', incomingVideoUrl);\n  console.log('Using constructed:', videoUrl);\n}\n\nreturn {\n  json: {\n    ...dataWithoutVideo, // Spread data WITHOUT the videoUrl field\n    email: safeEmail,\n    name: safeName,\n    prompt: safePrompt,\n    transcript: transcript,\n    transcript_clean: cleanedTranscript,\n    transcript_raw: originalTranscript,\n    storyTitle: storyTitle,\n    storyHtml: storyTemplate,\n    storyUrl: cleanStoryUrl,\n    fileName: `${safeStoryId}.html`,\n    videoUrl: videoUrl, // This now won't be overridden by Lambda's S3 URL\n    audioUrl: audioUrl\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5664,
        -160
      ],
      "id": "4d49b5a0-933a-47b6-8255-1dc6c05e516d",
      "name": "Generate Story Page HTML"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "storiesofyou-stories",
        "fileName": "={{ $json.fileName }}",
        "binaryData": false,
        "fileContent": "={{ $json.storyHtml }}",
        "additionalFields": {
          "acl": "publicRead"
        }
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        5888,
        -160
      ],
      "id": "07603623-9b49-432a-b389-3a4f0dacb3cc",
      "name": "Upload Story Page to S3",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "michael@storiesofyou.ai",
        "toEmail": "={{ $('Generate Story Page HTML').item.json.email }}",
        "subject": "=Your story is ready - {{ $('Generate Story Page HTML').item.json.prompt }}",
        "html": "=<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Story is Ready</title>\n    <style>\n        /* Force black text in header across all clients */\n        .header-text {\n            color: #000000 !important;\n        }\n        .header-subtitle {\n            color: #333333 !important;\n        }\n        /* Prevent dark mode from inverting colors */\n        [data-ogsc] .header-text {\n            color: #000000 !important;\n        }\n        [data-ogsc] .header-subtitle {\n            color: #333333 !important;\n        }\n        /* Gmail specific fixes */\n        u + .body .header-text {\n            color: #000000 !important;\n        }\n        /* Outlook fixes */\n        .ExternalClass .header-text {\n            color: #000000 !important;\n        }\n    </style>\n</head>\n<body class=\"body\" style=\"margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; background: radial-gradient(1200px 500px at 50% -200px, #fff7e9 0%, #fce8c8 50%, #e0cba7 100%); min-height: 100vh;\">\n    <div style=\"max-width: 600px; margin: 0 auto; background-color: white; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border-radius: 12px; overflow: hidden;\">\n        \n        <!-- Header with Logo -->\n        <div style=\"background: #e0cba7; padding: 40px 20px; text-align: center;\">\n            <img src=\"https://raw.githubusercontent.com/StoriesOfYou/storiesofyou-site/main/logo.png\" alt=\"Stories of You\" style=\"height: 48px; width: auto; margin-bottom: 16px;\" />\n            <h1 class=\"header-text\" style=\"color: #000000 !important; margin: 0; font-size: 28px; font-weight: 800; text-shadow: none;\">Your story is ready</h1>\n            <p class=\"header-subtitle\" style=\"color: #333333 !important; margin: 10px 0 0 0; font-size: 16px; font-style: italic; text-shadow: none;\">A memory in your own voice</p>\n        </div>\n        \n        <!-- Content -->\n        <div style=\"padding: 40px 30px; background: white;\">\n            <h2 style=\"color: #3d3528; margin: 0 0 20px 0; font-size: 24px; font-weight: 700;\">Hi {{ $('Generate Story Page HTML').item.json.name }},</h2>\n            \n            <p style=\"color: #374151; font-size: 16px; line-height: 1.6; margin: 0 0 24px 0;\">\n                Thank you for telling your story. Your recording is ready to listen to, and this memory is now preserved in your own voice.\n            </p>\n            \n            <!-- Story Preview Box -->\n            <div style=\"background: #faf3e7; border-left: 4px solid #e09a1b; padding: 20px; margin: 24px 0; border-radius: 8px;\">\n                <h3 style=\"color: #3d3528; margin: 0 0 8px 0; font-size: 18px; font-weight: 600;\">{{ $('Generate Story Page HTML').item.json.prompt }}</h3>\n                <p style=\"color: #6b7280; font-size: 14px; margin: 0;\">Your personal story</p>\n            </div>\n            \n            <!-- CTA Button -->\n            <div style=\"text-align: center; margin: 32px 0;\">\n                <a href=\"{{ $('Generate Story Page HTML').item.json.storyUrl }}\" style=\"background-color: #3d3528; color: white; padding: 16px 32px; text-decoration: none; border-radius: 12px; font-weight: 600; font-size: 18px; display: inline-block; box-shadow: 0 4px 12px rgba(61, 53, 40, 0.3); transition: all 0.2s ease;\">\n                    🎙️ Listen to Your Story\n                </a>\n            </div>\n            \n            <p style=\"color: #6b7280; font-size: 14px; line-height: 1.6; margin: 24px 0 0 0; text-align: center;\">\n                Share this link with family and friends so they can hear your story too.\n            </p>\n        </div>\n        \n        <!-- Footer -->\n        <div style=\"background: #3d3528; color: white; padding: 24px 30px; text-align: center;\">\n            <p style=\"color: rgba(255,255,255,0.9); font-size: 12px; margin: 0 0 8px 0;\">\n                Best regards,<br>\n                <strong>The Stories of You Team</strong>\n            </p>\n            <p style=\"color: rgba(255,255,255,0.7); font-size: 11px; margin: 0; font-style: italic;\">\n                Your voice, your story — preserved forever\n            </p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        6336,
        48
      ],
      "id": "967db2be-3752-49d5-93c4-4a9b43ae1132",
      "name": "Send Story Email",
      "webhookId": "7c79baa2-fb4b-4839-8612-1b1a40f7c8bb",
      "credentials": {
        "smtp": {
          "id": "lIGe25WZDyI5rkOz",
          "name": "Michael@storiesofyou.ai"
        }
      }
    },
    {
      "parameters": {
        "chatId": "8126082151",
        "text": "=Story sent to {{ $('Generate Story Page HTML').item.json.email }}\n",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        6560,
        48
      ],
      "id": "c5ab6759-f073-438c-a0a7-8f9019502f3c",
      "name": "Send a text message",
      "webhookId": "9c2726d9-4e09-4e1d-b689-e87a1f0165d5",
      "credentials": {
        "telegramApi": {
          "id": "LFuxW0eg25lSGILt",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "mikelandin@gmail.com",
        "subject": "=Story Submitted Sucessfully To: {{ $('Generate Story Page HTML').item.json.email }}",
        "message": "Looks like  a story was delivered",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        6112,
        -160
      ],
      "id": "daf08088-f2b4-4bbb-8d44-569aca25a9cf",
      "name": "Send a message",
      "webhookId": "f251aa94-6c0e-448f-903e-c946a6ff1698",
      "credentials": {
        "gmailOAuth2": {
          "id": "w63vYiVBuDimPh7k",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/transcript",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"audio_url\": \"{{ $json.audio_url }}\",\n  \"content_safety\": true,\n  \"content_safety_confidence\": 75,\n  \"punctuate\": true,\n  \"format_text\": true\n}",
        "options": {
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1056,
        48
      ],
      "id": "96e939ea-fe4a-4f83-a4b0-7e192ee4ea99",
      "name": "Start AssemblyAI Transcription",
      "credentials": {
        "httpHeaderAuth": {
          "id": "SW12uiWY40MGcsno",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.assemblyai.com/v2/transcript/{{ $('Start AssemblyAI Transcription').first().json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        48
      ],
      "id": "b9cea26f-172a-4dc9-9365-f5f13d0115da",
      "name": "Check AssemblyAI Status",
      "credentials": {
        "httpHeaderAuth": {
          "id": "SW12uiWY40MGcsno",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get transcript and content safety from AssemblyAI response\nconst transcript = $json.text || '';\nconst audioDuration = $json.audio_duration || null; // Extract audio duration from AssemblyAI\nconst contentSafetyData = $json.content_safety_labels || {};\nconst contentSafetyResults = contentSafetyData.results || [];\n\n// Get original story data from earlier nodes\nconst originalData = $('Prepare Story Data').first().json;\n\n// Check content safety (AssemblyAI format)\n// Look for high-confidence unsafe content\nconst hasUnsafeContent = contentSafetyResults.length > 0 && contentSafetyResults.some(result => {\n  // Check if any result has confidence > 0.75 for unsafe content\n  return result.confidence > 0.75 && ['profanity', 'hate_speech', 'harassment', 'violence_graphic'].includes(result.label);\n});\n\n// Calculate toxicity score from severity_score_summary if available\nlet maxToxicityScore = 0;\nif (contentSafetyData.severity_score_summary) {\n  const severityScores = Object.values(contentSafetyData.severity_score_summary);\n  if (severityScores.length > 0) {\n    maxToxicityScore = Math.max(...severityScores);\n  }\n}\n\n// Calculate fallback duration if AssemblyAI didn't provide it\nlet storyDurationSeconds = audioDuration;\nif (!storyDurationSeconds && transcript) {\n  // Estimate from word count: average 150 words per minute\n  const wordCount = transcript.split(' ').filter(word => word.length > 0).length;\n  storyDurationSeconds = Math.max(30, Math.round((wordCount / 150) * 60));\n}\n\nconsole.log('Audio duration processing:', {\n  assembly_ai_duration: audioDuration,\n  calculated_duration: storyDurationSeconds,\n  transcript_words: transcript ? transcript.split(' ').length : 0,\n  method: audioDuration ? 'assembly_ai_native' : 'word_count_estimation'\n});\n\nreturn {\n  json: {\n    ...originalData,\n    transcript: transcript,\n    audio_duration_seconds: storyDurationSeconds, // Add the duration\n    audio_duration_source: audioDuration ? 'assembly_ai' : 'estimated',\n    toxicity_score: maxToxicityScore,\n    content_safety_labels: contentSafetyResults,\n    is_rejected: hasUnsafeContent,\n    status: hasUnsafeContent ? 'rejected' : 'generating'\n  }\n};"
      },
      "id": "dd1ec132-8ce1-470c-af0b-2c916ec2570a",
      "name": "Toxicity Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2176,
        -112
      ]
    },
    {
      "parameters": {
        "tableName": "storiesofyou-recordings",
        "dataToSend": "autoMapInputData",
        "additionalFields": {}
      },
      "id": "5b5698f3-1613-4981-bc14-1b3ada312585",
      "name": "Create Story in DynamoDB",
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [
        608,
        48
      ],
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "storiesofyou-recordings",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "story_id",
              "fieldValue": "={{ $('Prepare Story Data').first().json.story_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.name }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $('Prepare Story Data').first().json.email }}"
            },
            {
              "fieldId": "prompt",
              "fieldValue": "={{ $('Prepare Story Data').first().json.prompt }}"
            },
            {
              "fieldId": "audio_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_key }}"
            },
            {
              "fieldId": "photo_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.photo_key }}"
            },
            {
              "fieldId": "audio_url",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_url }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $('Prepare Story Data').first().json.created_at }}"
            },
            {
              "fieldId": "transcribe_job_name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.transcribe_job_name }}"
            },
            {
              "fieldId": "user_agent",
              "fieldValue": "={{ $('Prepare Story Data').first().json.user_agent }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "transcribing"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [
        1280,
        48
      ],
      "id": "afedbc1b-08dd-45a5-a33e-f27810f30407",
      "name": "Update DynamoDB w Status",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "storiesofyou-recordings",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "story_id",
              "fieldValue": "={{ $('Prepare Story Data').first().json.story_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.name }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $('Prepare Story Data').first().json.email }}"
            },
            {
              "fieldId": "prompt",
              "fieldValue": "={{ $('Prepare Story Data').first().json.prompt }}"
            },
            {
              "fieldId": "audio_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_key }}"
            },
            {
              "fieldId": "photo_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.photo_key }}"
            },
            {
              "fieldId": "audio_url",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_url }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $('Prepare Story Data').first().json.created_at }}"
            },
            {
              "fieldId": "transcribe_job_name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.transcribe_job_name }}"
            },
            {
              "fieldId": "user_agent",
              "fieldValue": "={{ $('Prepare Story Data').first().json.user_agent }}"
            },
            {
              "fieldId": "transcript",
              "fieldValue": "={{ $json.transcript }}"
            },
            {
              "fieldId": "toxicity_score",
              "fieldValue": "={{ $json.toxicity_score || 0 }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "generating"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [
        2400,
        -112
      ],
      "id": "8d64f97e-cb42-4e36-ae87-98ea744a1779",
      "name": "Update Transcript in DynamoDB",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "claude-3-haiku-20240307",
          "mode": "list",
          "cachedResultName": "claude-3-haiku-20240307"
        },
        "messages": {
          "values": [
            {
              "content": "=You are creating visual scenes for a family memory preservation service called \"Stories of You.\" These images will accompany personal stories told in someone's own voice, creating an emotional bridge between generations.\n\nTRANSCRIPT TO PROCESS:\n{{ $json.transcript }}\n\nTASK 1 - CLEAN THE TRANSCRIPT:\n- Remove filler words (um, uh, like, you know, etc.)\n- Fix obvious transcription errors and improve grammar\n- Maintain the speaker's authentic voice and conversational tone\n- Keep all specific details, names, places, and personal experiences\n- Ensure proper punctuation and sentence structure\n- Do not change the meaning or remove important content\n\nTASK 2 - ANALYZE STORY STRUCTURE:\nCarefully read the transcript and identify three distinct chronological phases:\n- BEGINNING: The opening context, setting, initial situation, or background\n- MIDDLE: The main events, actions, developments, or turning point\n- END: The resolution, outcome, reflection, or lasting impact\n\nTASK 3 - CREATE THREE PROGRESSIVE VISUAL SCENES:\nCreate three DIFFERENT images that follow the story's progression. Each image should represent what's happening in that specific part of the story.\n\nVISUAL STYLE FOR ALL IMAGES:\n- Soft, painterly realism with warm, nostalgic quality\n- Golden hour lighting that evokes comfort and memory\n- Style reminiscent of Norman Rockwell paintings or vintage family photos\n- Rich textures suggesting the passage of time\n- Focus on environments and objects, NO people\n- Intimate spaces where memories were made\n\nIMAGE REQUIREMENTS:\n- Image 1 must visually represent the BEGINNING of the story\n- Image 2 must visually represent the MIDDLE of the story  \n- Image 3 must visually represent the END of the story\n- Each must be distinctly different and show progression\n- Minimum 25 words per prompt, rich in specific details\n\nREQUIRED OUTPUT FORMAT:\nReturn only valid JSON in this exact structure:\n\n{\n  \"cleaned_transcript\": \"[Your cleaned transcript here]\",\n  \"story_phases\": {\n    \"beginning\": \"[What happens at the start of the story]\",\n    \"middle\": \"[What happens in the middle of the story]\",\n    \"end\": \"[What happens at the end of the story]\"\n  },\n  \"image_prompt_1\": \"[Detailed scene for the BEGINNING - warm lighting, nostalgic atmosphere, specific to this part of story, no people - min 25 words]\",\n  \"image_prompt_2\": \"[Detailed scene for the MIDDLE - different from image 1, specific to this part of story, no people - min 25 words]\",\n  \"image_prompt_3\": \"[Detailed scene for the END - different from images 1&2, specific to this part of story, no people - min 25 words]\"\n}\n\nDo not include any other text outside the JSON structure."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [
        2848,
        -272
      ],
      "id": "395c8d46-cdac-44ca-9a0c-207a0627c929",
      "name": "Message a model",
      "credentials": {
        "anthropicApi": {
          "id": "y5YFvhLd4AWKnhWY",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "storiesofyou-recordings",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "story_id",
              "fieldValue": "={{ $('Prepare Story Data').first().json.story_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.name }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $('Prepare Story Data').first().json.email }}"
            },
            {
              "fieldId": "prompt",
              "fieldValue": "={{ $('Prepare Story Data').first().json.prompt }}"
            },
            {
              "fieldId": "audio_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_key }}"
            },
            {
              "fieldId": "photo_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.photo_key }}"
            },
            {
              "fieldId": "audio_url",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_url }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $('Prepare Story Data').first().json.created_at }}"
            },
            {
              "fieldId": "transcribe_job_name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.transcribe_job_name }}"
            },
            {
              "fieldId": "user_agent",
              "fieldValue": "={{ $('Prepare Story Data').first().json.user_agent }}"
            },
            {
              "fieldId": "transcript",
              "fieldValue": "={{ $('Toxicity Check').first().json.transcript }}"
            },
            {
              "fieldId": "toxicity_score",
              "fieldValue": "={{ $('Toxicity Check').first().json.toxicity_score || 0 }}"
            },
            {
              "fieldId": "story_url",
              "fieldValue": "={{ $('Generate Story Page HTML').item.json.storyUrl }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            },
            {
              "fieldId": "transcript_clean",
              "fieldValue": "={{ $('Generate Story Page HTML').first().json.transcript_clean }}"
            },
            {
              "fieldId": "image_prompts",
              "fieldValue": "={{ $('Parse Claude JSON').first().json.image_prompt }}"
            }
          ]
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [
        6112,
        48
      ],
      "id": "cf7b5213-013c-4351-8825-ec5d854f8a62",
      "name": "Final Dynamo Update with Page URL",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "storiesofyou-recordings",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "story_id",
              "fieldValue": "={{ $('Prepare Story Data').first().json.story_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.name }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $('Prepare Story Data').first().json.email }}"
            },
            {
              "fieldId": "prompt",
              "fieldValue": "{{ $('Prepare Story Data').first().json.prompt }}"
            },
            {
              "fieldId": "audio_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_key }}"
            },
            {
              "fieldId": "photo_key",
              "fieldValue": "={{ $('Prepare Story Data').first().json.photo_key }}"
            },
            {
              "fieldId": "audio_url",
              "fieldValue": "={{ $('Prepare Story Data').first().json.audio_url }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $('Prepare Story Data').first().json.created_at }}"
            },
            {
              "fieldId": "transcribe_job_name",
              "fieldValue": "={{ $('Prepare Story Data').first().json.transcribe_job_name }}"
            },
            {
              "fieldId": "user_agent",
              "fieldValue": "={{ $('Prepare Story Data').first().json.user_agent }}"
            },
            {
              "fieldId": "transcript",
              "fieldValue": "={{ $json.transcript }}"
            },
            {
              "fieldId": "toxicity_score",
              "fieldValue": "={{ $json.toxicity_score }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "rejected"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsDynamoDb",
      "typeVersion": 1,
      "position": [
        2912,
        -80
      ],
      "id": "0db0e822-4378-452f-99b7-13aaaf3a7150",
      "name": "Update DynamoDB for Toxicity Fail",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"version\": \"ideogram-ai/ideogram-v3-turbo\",\n  \"input\": {\n    \"prompt\": \"{{ $json.image_prompt_1 }}, soft painterly realism, warm golden hour lighting, nostalgic atmosphere, Norman Rockwell style warmth, vintage family photo aesthetic, rich textures, no people, intimate memory spaces\",\n    \"aspect_ratio\": \"16:9\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        -368
      ],
      "id": "cfb9ca9d-0e95-46a7-a7fe-0628279e68c8",
      "name": "Replicate API Call",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.urls.stream }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4320,
        -368
      ],
      "id": "18e00df7-5569-4572-8db5-de78b97efddd",
      "name": "Attempt Image Download",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "79dc0d7d-badb-47f9-a389-2c82e0d57555",
              "leftValue": "={{ $('Create Story in DynamoDB').item.json.photo_key }}",
              "rightValue": "default-story-image.jpg",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3872,
        -368
      ],
      "id": "d590a476-0377-4302-b798-3e8aa74e4b4a",
      "name": "Did the Storyteller Provide a Photo?"
    },
    {
      "parameters": {
        "jsCode": "// Parse Claude's response - BACKWARDS COMPATIBLE with progressive images\nconst claudeResponse = $input.first().json;\n\nlet responseText = '';\nif (claudeResponse.content && claudeResponse.content[0] && claudeResponse.content[0].text) {\n  responseText = claudeResponse.content[0].text.trim();\n}\n\n// Initialize defaults\nlet cleanedTranscript = '';\nlet imagePrompt1 = '';\nlet imagePrompt2 = '';\nlet imagePrompt3 = '';\nlet storyPhases = {};\nlet parseSuccess = false;\n\ntry {\n  const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const parsed = JSON.parse(jsonMatch[0]);\n    cleanedTranscript = parsed.cleaned_transcript || '';\n    \n    // Extract progressive prompts from new format\n    imagePrompt1 = parsed.image_prompt_1 || parsed.image_prompt || '';\n    imagePrompt2 = parsed.image_prompt_2 || parsed.image_prompt || '';\n    imagePrompt3 = parsed.image_prompt_3 || parsed.image_prompt || '';\n    \n    storyPhases = parsed.story_phases || {};\n    parseSuccess = true;\n  }\n} catch (e) {\n  console.log('JSON parsing failed:', e);\n  // Fallback to defaults\n  cleanedTranscript = responseText || 'Transcript processing failed';\n  imagePrompt1 = imagePrompt2 = imagePrompt3 = 'nostalgic family home interior, warm golden lighting, cozy atmosphere, vintage details, no people';\n}\n\n// Return structured data maintaining backwards compatibility\nreturn {\n  json: {\n    ...claudeResponse,\n    cleaned_transcript: cleanedTranscript,\n    \n    // CRITICAL: Keep old field for compatibility\n    image_prompt: imagePrompt1, // Fallback field\n    \n    // NEW: Individual progressive prompts\n    image_prompt_1: imagePrompt1,\n    image_prompt_2: imagePrompt2, \n    image_prompt_3: imagePrompt3,\n    \n    story_phases: storyPhases,\n    parse_success: parseSuccess,\n    raw_claude_response: responseText\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3200,
        -272
      ],
      "id": "374be18e-7a0f-49b8-ad09-015266f81448",
      "name": "Parse Claude JSON"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"Story received! You'll receive an email with your story page in a few minutes.\",\n  \"story_id\": \"{{ $json.story_id }}\",\n  \"status\": \"processing\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        832,
        48
      ],
      "id": "b557ea4e-fd08-4a3b-b87c-64da5b080997",
      "name": "Close Webhook"
    },
    {
      "parameters": {
        "jsCode": "// N8N Smart Music Selection - FIXED for Shorter Music Selection\n// Place this after \"Parse Claude JSON\" in your workflow\n\n// Get all the data we need\nconst claudeData = $json;\nconst originalData = $('Prepare Story Data').first().json;\n\n// Get story duration from Toxicity Check node (AssemblyAI provides this)\nconst storyDuration = $('Toxicity Check').first().json.audio_duration_seconds || 180;\n\nconsole.log('=== PRODUCTION MUSIC SELECTION ===');\nconsole.log('Story duration:', storyDuration, 'seconds');\nconsole.log('Original prompt:', originalData.prompt);\n\n// Extract content for analysis\nconst transcript = claudeData.transcript || originalData.transcript || '';\nconst prompt = originalData.prompt || '';\nconst storyContent = (transcript + ' ' + prompt).toLowerCase();\n\n// PRODUCTION MUSIC LIBRARY - matches your actual S3 structure\nconst musicLibrary = {\n  adventurous: [\n    { name: 'Easy-Day', mood: 'calm_country', keywords: ['easy', 'calm', 'peaceful', 'simple'] },\n    { name: 'Yard-Sale', mood: 'community_folk', keywords: ['community', 'people', 'social', 'gathering', 'sale'] }\n  ],\n  family: [\n    { name: 'Dancing-Star', mood: 'happy_celebration', keywords: ['dancing', 'happy', 'joy', 'celebration', 'party'] },\n    { name: 'Seasonal', mood: 'holiday_tradition', keywords: ['season', 'holiday', 'christmas', 'thanksgiving', 'tradition'] },\n    { name: 'Serenity', mood: 'peaceful_family', keywords: ['calm', 'peaceful', 'serenity', 'quiet', 'together'] }\n  ],\n  nostalgic: [\n    { name: 'Mysterious-Sorrows', mood: 'general_nostalgia', keywords: ['memory', 'remember', 'past', 'childhood'] },\n    { name: 'The-Opening', mood: 'new_beginnings', keywords: ['beginning', 'start', 'new', 'opening', 'first'] },\n    { name: 'We-Are-The-Rain', mood: 'loss_sadness', keywords: ['rain', 'sad', 'lost', 'miss', 'gone', 'passed away'] }\n  ],\n  reflective: [\n    { name: 'Passing-Time', mood: 'deep_time_reflection', keywords: ['time', 'aging', 'years', 'lifetime', 'decades', 'mortality'] },\n    { name: 'Terminal-D', mood: 'serious_contemplation', keywords: ['serious', 'deep', 'contemplation', 'difficult', 'terminal'] },\n    { name: 'Waterfall', mood: 'nature_meditation', keywords: ['nature', 'water', 'waterfall', 'flowing', 'meditation', 'natural'] }\n  ]\n};\n\n// Available duration variants (what you created manually)\nconst availableDurations = [30, 60, 90, 120, 150, 180, 210, 240];\n\n/**\n * Smart category detection with keyword scoring\n */\nfunction detectStoryCategory(content) {\n  const scores = { adventurous: 0, family: 0, nostalgic: 0, reflective: 0 };\n  \n  // Category-specific keyword groups with weights\n  const categoryKeywords = {\n    nostalgic: {\n      keywords: ['childhood', 'young', 'growing up', 'remember', 'back then', 'used to', 'school', 'grandpa', 'grandma', 'old house', 'years ago'],\n      weight: 2\n    },\n    family: {\n      keywords: ['family', 'home', 'mother', 'father', 'children', 'wedding', 'holiday', 'celebration', 'together', 'siblings', 'relatives'],\n      weight: 1.5\n    },\n    adventurous: {\n      keywords: ['travel', 'adventure', 'journey', 'trip', 'explore', 'mountain', 'road trip', 'vacation', 'community', 'country', 'outdoors'],\n      weight: 1.5\n    },\n    reflective: {\n      keywords: ['learned', 'wisdom', 'lesson', 'difficult', 'challenge', 'time', 'aging', 'life', 'meaning', 'death', 'serious', 'deep'],\n      weight: 1.8\n    }\n  };\n  \n  // Score each category\n  for (const [category, data] of Object.entries(categoryKeywords)) {\n    data.keywords.forEach(keyword => {\n      if (content.includes(keyword)) {\n        scores[category] += data.weight;\n      }\n    });\n  }\n  \n  // Find highest scoring category\n  const topCategory = Object.keys(scores).reduce((a, b) => scores[a] > scores[b] ? a : b);\n  \n  return {\n    category: scores[topCategory] > 0 ? topCategory : 'family', // Default to family\n    confidence: scores[topCategory],\n    allScores: scores\n  };\n}\n\n/**\n * Select specific track within category using keyword matching\n */\nfunction selectSpecificTrack(category, content) {\n  const tracks = musicLibrary[category];\n  let bestMatch = tracks[0]; // Default to first track\n  let bestScore = 0;\n  \n  // Score each track based on keyword matches\n  tracks.forEach(track => {\n    let score = 0;\n    track.keywords.forEach(keyword => {\n      if (content.includes(keyword)) {\n        score += 1;\n      }\n    });\n    \n    if (score > bestScore) {\n      bestScore = score;\n      bestMatch = track;\n    }\n  });\n  \n  return bestMatch;\n}\n\n/**\n * Find optimal duration variant - FIXED to select SHORTER music\n * Music should end BEFORE the story ends, leaving room for outro\n */\nfunction selectOptimalDuration(storyDurationSeconds) {\n  // FIXED LOGIC: We want music SHORTER than the story\n  // Find the LONGEST music that is still SHORTER than the story\n  \n  let optimalDuration = 30; // Start with minimum\n  \n  // Iterate through durations to find the longest that's still shorter\n  for (let i = availableDurations.length - 1; i >= 0; i--) {\n    const duration = availableDurations[i];\n    if (duration <= storyDurationSeconds - 5) { // Leave at least 5 seconds for story to finish without music\n      optimalDuration = duration;\n      break;\n    }\n  }\n  \n  // If story is very short (< 35 seconds), use the 30-second minimum\n  if (storyDurationSeconds < 35) {\n    optimalDuration = 30;\n  }\n  \n  console.log(`Duration calculation: ${storyDurationSeconds}s story -> selected ${optimalDuration}s music`);\n  console.log(`Music will end ${storyDurationSeconds - optimalDuration}s before story ends`);\n  return optimalDuration;\n}\n\n// Execute main selection logic\nconst categoryResult = detectStoryCategory(storyContent);\nconst selectedTrack = selectSpecificTrack(categoryResult.category, storyContent);\nconst optimalDuration = selectOptimalDuration(storyDuration);\n\n// Build S3 paths using your actual bucket structure\nconst musicFileName = `${selectedTrack.name}-${optimalDuration}s.mp3`;\nconst s3Key = `music-library/${categoryResult.category}/${selectedTrack.name}/${musicFileName}`;\nconst s3Url = `s3://assets.storiesofyou.ai/${s3Key}`;\nconst httpUrl = `https://assets.storiesofyou.ai/${s3Key}`;\n\n// Audio mixing settings by mood - ADJUSTED for better balance when music ends early\nconst mixingSettings = {\n  adventurous: { volume: 0.12, fadeIn: 2, fadeOut: 3 },\n  family: { volume: 0.11, fadeIn: 2, fadeOut: 4 },\n  nostalgic: { volume: 0.10, fadeIn: 3, fadeOut: 5 },\n  reflective: { volume: 0.08, fadeIn: 4, fadeOut: 6 }\n};\n\nconst selectedSettings = mixingSettings[categoryResult.category];\n\n// Create comprehensive music selection object\nconst musicSelection = {\n  // Core selection\n  category: categoryResult.category,\n  track_name: selectedTrack.name,\n  track_mood: selectedTrack.mood,\n  duration_seconds: optimalDuration,\n  \n  // File paths\n  s3_key: s3Key,\n  s3_url: s3Url,\n  http_url: httpUrl,\n  filename: musicFileName,\n  \n  // Audio settings - ADJUSTED for early music ending\n  volume_level: selectedSettings.volume,\n  fade_in_seconds: selectedSettings.fadeIn,\n  fade_out_seconds: selectedSettings.fadeOut,\n  \n  // Selection metadata\n  confidence_score: categoryResult.confidence,\n  category_scores: categoryResult.allScores,\n  keywords_matched: selectedTrack.keywords.filter(k => storyContent.includes(k)),\n  \n  // Video timing - FIXED for shorter music\n  story_duration: storyDuration,\n  music_duration: optimalDuration,\n  music_ends_before_story_by: storyDuration - optimalDuration,\n  \n  // Selection reasoning - UPDATED\n  selection_reasoning: `Selected \"${categoryResult.category}/${selectedTrack.name}\" (${selectedTrack.mood}) based on ${categoryResult.confidence} keyword matches. Duration: ${optimalDuration}s music for ${storyDuration}s story. Music ends ${storyDuration - optimalDuration}s before story completion.`\n};\n\nconsole.log('=== MUSIC SELECTION COMPLETE ===');\nconsole.log(`Selected: ${musicSelection.category}/${musicSelection.track_name}`);\nconsole.log(`Duration: ${musicSelection.duration_seconds}s music for ${storyDuration}s story`);\nconsole.log(`Music ends: ${musicSelection.music_ends_before_story_by}s before story`);\nconsole.log(`File: ${musicSelection.filename}`);\nconsole.log(`Confidence: ${categoryResult.confidence} points`);\nconsole.log(`Keywords matched: ${musicSelection.keywords_matched.join(', ')}`);\nconsole.log(`S3 URL: ${s3Url}`);\n\n// Validate selection\nif (!selectedTrack || !optimalDuration) {\n  throw new Error('Music selection failed - invalid parameters');\n}\n\n// Calculate total video duration (story + 3-second buffer for outro)\nconst videoTotalDuration = storyDuration + 3;\n\n// Return enhanced data for video generation\nreturn {\n  json: {\n    // Keep all existing Claude data\n    ...claudeData,\n    \n    // Add music selection\n    music_selection: musicSelection,\n    \n    // CRITICAL: Fields for video generation Lambda - ALL 4 FIELDS ADDED\n    backgroundMusicUrl: s3Url,\n    musicUrl: httpUrl,\n    storyDurationSeconds: storyDuration,\n    musicDurationSeconds: optimalDuration,\n    videoTotalDuration: videoTotalDuration,\n    videoTargetLength: videoTotalDuration,  // <-- ADDED THIS MISSING FIELD\n    \n    // Enhanced metadata for downstream processing\n    story_id: originalData.story_id,\n    name: originalData.name,\n    email: originalData.email,\n    prompt: originalData.prompt,\n    \n    // Processing status\n    music_ready: true,\n    duration_detected: true,\n    processing_step: 'music_selection_complete',\n    timestamp: new Date().toISOString(),\n    \n    // For MediaConvert job - UPDATED for shorter music\n    video_generation_params: {\n      story_duration: storyDuration,\n      music_duration: optimalDuration,\n      video_total_duration: videoTotalDuration,\n      music_volume: selectedSettings.volume,\n      music_fade_in: selectedSettings.fadeIn,\n      music_fade_out: selectedSettings.fadeOut,\n      music_ends_at: optimalDuration,\n      story_ends_at: storyDuration,\n      outro_starts_at: storyDuration,\n      video_ends_at: videoTotalDuration,\n      approach: 'music_shorter_than_story'\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3648,
        -368
      ],
      "id": "1d1837cc-fbd3-46c0-be74-e74a9975167a",
      "name": "Smart Music Selection"
    },
    {
      "parameters": {
        "jsCode": "// FIXED: Generate Multiple AI Images using Claude's unique progressive prompts\nconst claudeData = $json;\nconst originalData = $('Prepare Story Data').first().json;\nconst hasUserPhoto = originalData.photo_key && originalData.photo_key !== 'default-story-image.jpg';\n\n// Determine how many images to generate\nconst imagesToGenerate = hasUserPhoto ? 2 : 3;\n\nconsole.log(`Generating ${imagesToGenerate} AI images (user photo: ${hasUserPhoto})`);\n\n// CRITICAL FIX: Use Claude's three unique progressive prompts\nconst imagePrompts = [];\n\nif (hasUserPhoto) {\n  // User has photo, so skip first AI image, use prompts 2 and 3\n  imagePrompts.push(claudeData.image_prompt_2 || 'nostalgic scene, warm golden lighting, no people');\n  imagePrompts.push(claudeData.image_prompt_3 || 'nostalgic scene, warm golden lighting, no people');\n} else {\n  // No user photo, use all three unique prompts from Claude\n  imagePrompts.push(claudeData.image_prompt_1 || 'nostalgic scene, warm golden lighting, no people');\n  imagePrompts.push(claudeData.image_prompt_2 || 'nostalgic scene, warm golden lighting, no people');\n  imagePrompts.push(claudeData.image_prompt_3 || 'nostalgic scene, warm golden lighting, no people');\n}\n\nconsole.log('Using unique progressive prompts:', imagePrompts);\n\n// Return the data needed for multiple Replicate calls\nreturn {\n  json: {\n    ...claudeData,\n    \n    // Image generation config\n    images_to_generate: imagesToGenerate,\n    has_user_photo: hasUserPhoto,\n    image_prompts: imagePrompts, // Now contains unique prompts\n    \n    // Keep the individual prompts for reference\n    image_prompt_1: claudeData.image_prompt_1,\n    image_prompt_2: claudeData.image_prompt_2,\n    image_prompt_3: claudeData.image_prompt_3,\n    \n    // For downstream nodes\n    story_id: originalData.story_id,\n    \n    // Keep all existing data\n    music_selection: claudeData.music_selection,\n    backgroundMusicUrl: claudeData.backgroundMusicUrl,\n    storyDurationSeconds: claudeData.storyDurationSeconds,\n    videoTargetLength: claudeData.videoTargetLength\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3424,
        -272
      ],
      "id": "8b7f6cf6-55a6-4bf0-94af-4f3290f89e74",
      "name": "Generate Multiple AI Images"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"version\": \"ideogram-ai/ideogram-v3-turbo\",\n  \"input\": {\n    \"prompt\": \"{{ $json.image_prompt_2 }}, soft painterly realism, warm golden hour lighting, nostalgic atmosphere, Norman Rockwell style warmth, vintage family photo aesthetic, rich textures, no people, intimate memory spaces\",\n    \"aspect_ratio\": \"16:9\"\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        -176
      ],
      "id": "7a56aa1d-a459-499b-bab0-bed0eaf147e9",
      "name": "Replicate API Call1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.urls.stream }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4320,
        -176
      ],
      "id": "84c769b9-0898-48aa-acd7-2a196a3600ec",
      "name": "Attempt Image Download1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"version\": \"ideogram-ai/ideogram-v3-turbo\",\n  \"input\": {\n    \"prompt\": \"{{ $json.image_prompt_3 }}, soft painterly realism, warm golden hour lighting, nostalgic atmosphere, Norman Rockwell style warmth, vintage family photo aesthetic, rich textures, no people, intimate memory spaces\",\n    \"aspect_ratio\": \"16:9\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        144
      ],
      "id": "60306afa-d750-451b-901d-4d916d14a8b4",
      "name": "Replicate API Call2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.urls.stream }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          },
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4320,
        144
      ],
      "id": "94b25510-9802-400a-842d-2b1ca430e36d",
      "name": "Attempt Image Download2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tvwI6zppXnHOjOn6",
          "name": "Replicate"
        }
      }
    },
    {
      "parameters": {
        "function": "arn:aws:lambda:us-east-2:596430611773:function:storiesofyou-video-generation",
        "payload": "={\n  \"storyId\": \"{{ $('Prepare Story Data').first().json.story_id }}\",\n  \"audioKey\": \"{{ $('Prepare Story Data').first().json.audio_key }}\",\n  \"storytellerName\": \"{{ $('Prepare Story Data').first().json.name }}\",\n  \"prompt\": \"{{ $('Prepare Story Data').first().json.prompt }}\",\n  \"email\": \"{{ $('Prepare Story Data').first().json.email }}\",\n  \n  \"hasUserPhoto\": {{ $('Image Aggregation').first().json.hasUserPhoto }},\n  \"userPhotoKey\": \"{{ $('Image Aggregation').first().json.userPhotoKey }}\",\n  \"generatedImageKeys\": {{ JSON.stringify($('Image Aggregation').first().json.generatedImageKeys) }},\n  \n  \"imageSequence\": {{ JSON.stringify($('Image Aggregation').first().json.imageSequence) }},\n  \"allImageUrls\": {{ JSON.stringify($('Image Aggregation').first().json.allImageUrls) }},\n  \n  \"backgroundMusicUrl\": \"{{ $('Smart Music Selection').first().json.backgroundMusicUrl }}\",\n  \"storyDurationSeconds\": {{ $('Smart Music Selection').first().json.storyDurationSeconds }},\n\"musicDurationSeconds\": {{ $('Smart Music Selection').first().json.musicDurationSeconds }},\n  \"videoTargetLength\": {{ $('Smart Music Selection').first().json.videoTargetLength }},\n  \"musicSelection\": {{ JSON.stringify($('Smart Music Selection').first().json.music_selection) }},\n  \n  \"debugInfo\": {{ JSON.stringify($('Image Aggregation').first().json.debugInfo) }},\n  \"testMode\": false\n}"
      },
      "type": "n8n-nodes-base.awsLambda",
      "typeVersion": 1,
      "position": [
        5216,
        -160
      ],
      "id": "1c76293e-1474-495f-8664-9cae5e3ef2ea",
      "name": "AWS Lambda",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// FIXED: Image Aggregation - Properly defines hasUserPhoto\nconsole.log('=== FIXED IMAGE AGGREGATION FOR VIDEO GENERATION ===');\n\n// Get story metadata from the original Prepare Story Data node\nconst originalData = $('Prepare Story Data').first().json;\n\n// DEFINE hasUserPhoto - this was missing!\nconst hasUserPhoto = !!(originalData.photo_key && \n                      originalData.photo_key !== 'default-story-image.jpg' &&\n                      originalData.photo_key !== '' &&\n                      originalData.photo_key !== null);\n\nconsole.log('Story ID:', originalData.story_id);\nconsole.log('Photo key:', originalData.photo_key);\nconsole.log('Has user photo:', hasUserPhoto);\n\n// Process all merged items to extract AI-generated image keys\nconst generatedImageKeys = [];\nconst allItems = $input.all();\n\nconsole.log('Processing', allItems.length, 'merged items');\n\nallItems.forEach((item, index) => {\n  console.log(`Item ${index}:`, JSON.stringify(item.json, null, 2));\n  \n  // Check for S3 upload response with Key field\n  if (item.json && item.json.Key) {\n    const key = item.json.Key;\n    \n    // Only collect AI-generated images (not user photos)\n    if (key.includes('generated-images/') && key.includes(originalData.story_id)) {\n      generatedImageKeys.push(key);\n      console.log(`✅ Added AI image: ${key}`);\n    }\n  }\n  \n  // Alternative: Check for other possible key structures\n  if (item.json && item.json.key && item.json.key.includes('generated-images/')) {\n    if (!generatedImageKeys.includes(item.json.key)) {\n      generatedImageKeys.push(item.json.key);\n      console.log(`✅ Added AI image (alt key): ${item.json.key}`);\n    }\n  }\n});\n\n// Sort to ensure consistent ordering (1, 2, 3)\ngeneratedImageKeys.sort((a, b) => {\n  const getNum = (key) => {\n    const match = key.match(/-(\\d+)\\.png$/);\n    return match ? parseInt(match[1]) : 0;\n  };\n  return getNum(a) - getNum(b);\n});\n\nconsole.log('Generated image keys found:', generatedImageKeys);\n\n// Build complete image structure for video generation\nconst videoImageStructure = {\n  storyId: originalData.story_id,\n  hasUserPhoto: hasUserPhoto,\n  userPhotoKey: hasUserPhoto ? originalData.photo_key : null,\n  generatedImageKeys: generatedImageKeys,\n  \n  // Build complete S3 URLs for video generation\n  imageSequence: [],\n  \n  // Metadata for debugging\n  totalExpectedImages: 3, // Always 3 total images\n  aiImageCount: generatedImageKeys.length,\n  processingTimestamp: new Date().toISOString()\n};\n\n// Build the video image sequence based on whether user provided a photo\nif (hasUserPhoto) {\n  // SCENARIO X: User provided photo + AI images 2,3 (AI Image 1 was not generated)\n  videoImageStructure.imageSequence = [\n    {\n      type: 'user_photo',\n      s3Key: originalData.photo_key,\n      s3Url: `s3://storiesofyou-incoming/${originalData.photo_key}`\n    },\n    {\n      type: 'ai_generated',\n      s3Key: generatedImageKeys.find(key => key.includes('-2.png')) || null,\n      s3Url: generatedImageKeys.find(key => key.includes('-2.png')) ? \n             `s3://storiesofyou-stories/${generatedImageKeys.find(key => key.includes('-2.png'))}` : null\n    },\n    {\n      type: 'ai_generated', \n      s3Key: generatedImageKeys.find(key => key.includes('-3.png')) || null,\n      s3Url: generatedImageKeys.find(key => key.includes('-3.png')) ? \n             `s3://storiesofyou-stories/${generatedImageKeys.find(key => key.includes('-3.png'))}` : null\n    }\n  ];\n  \n  console.log('✅ SCENARIO X: User photo + AI images 2,3');\n} else {\n  // SCENARIO Y: No user photo, use AI images 1,2,3\n  videoImageStructure.imageSequence = [\n    {\n      type: 'ai_generated',\n      s3Key: generatedImageKeys.find(key => key.includes('-1.png')) || null,\n      s3Url: generatedImageKeys.find(key => key.includes('-1.png')) ? \n             `s3://storiesofyou-stories/${generatedImageKeys.find(key => key.includes('-1.png'))}` : null\n    },\n    {\n      type: 'ai_generated',\n      s3Key: generatedImageKeys.find(key => key.includes('-2.png')) || null, \n      s3Url: generatedImageKeys.find(key => key.includes('-2.png')) ? \n             `s3://storiesofyou-stories/${generatedImageKeys.find(key => key.includes('-2.png'))}` : null\n    },\n    {\n      type: 'ai_generated',\n      s3Key: generatedImageKeys.find(key => key.includes('-3.png')) || null,\n      s3Url: generatedImageKeys.find(key => key.includes('-3.png')) ? \n             `s3://storiesofyou-stories/${generatedImageKeys.find(key => key.includes('-3.png'))}` : null\n    }\n  ];\n  \n  console.log('✅ SCENARIO Y: AI images 1,2,3');\n}\n\n// Validate that we have all required images\nconst missingImages = videoImageStructure.imageSequence.filter(img => !img.s3Url);\nif (missingImages.length > 0) {\n  console.error('❌ MISSING REQUIRED IMAGES:', {\n    hasUserPhoto: hasUserPhoto,\n    expectedScenario: hasUserPhoto ? 'X (user photo + AI 2,3)' : 'Y (AI 1,2,3)',\n    missingCount: missingImages.length,\n    allGeneratedKeys: generatedImageKeys,\n    missingImages: missingImages\n  });\n  \n  // Don't throw error, just log it and continue with available images\n  console.warn('Continuing with available images...');\n}\n\nconsole.log('✅ Video image structure complete:', JSON.stringify(videoImageStructure, null, 2));\n\n// Return complete structure for Lambda\nreturn {\n  json: {\n    // Image data for Lambda\n    ...videoImageStructure,\n    \n    // Keep original story data\n    name: originalData.name,\n    email: originalData.email,\n    prompt: originalData.prompt,\n    audio_key: originalData.audio_key,\n    \n    // For backward compatibility with existing Lambda\n    allImageUrls: videoImageStructure.imageSequence.map(img => img.s3Url).filter(url => url),\n    \n    // Debug info\n    debugInfo: {\n      mergedItemCount: allItems.length,\n      foundAIImages: generatedImageKeys.length,\n      hasAllRequiredImages: missingImages.length === 0,\n      scenario: hasUserPhoto ? 'user_photo_scenario' : 'ai_only_scenario'\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4992,
        -160
      ],
      "id": "270d807c-2788-47ea-8467-45f28a53e844",
      "name": "Image Aggregation"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "storiesofyou-stories",
        "fileName": "=generated-images/{{ $('Prepare Story Data').first().json.story_id }}-1.png",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        4544,
        -368
      ],
      "id": "73ca3d22-d6e5-450e-a493-ca4a682fdb50",
      "name": "Upload AI Image 1 to S3",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "storiesofyou-stories",
        "fileName": "=generated-images/{{ $('Prepare Story Data').first().json.story_id }}-2.png",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        4544,
        -176
      ],
      "id": "0033a158-3f12-48ee-9d06-3471469b54ea",
      "name": "Upload AI Image 2 to S3",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "storiesofyou-stories",
        "fileName": "=generated-images/{{ $('Prepare Story Data').first().json.story_id }}-3.png",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        4544,
        144
      ],
      "id": "08806be3-1db0-4387-835e-097d892b6ca5",
      "name": "Upload AI Image 3 to S3",
      "credentials": {
        "aws": {
          "id": "36gQdGtTiwfgvBUA",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4768,
        -176
      ],
      "id": "33488801-434a-4907-8af1-3fe7e28d6cf0",
      "name": "Merge Photos"
    },
    {
      "parameters": {
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5440,
        -160
      ],
      "id": "393f74a9-88de-4557-b66c-93444d1ca066",
      "name": "Wait",
      "webhookId": "5334baed-d624-4074-aab9-7fc536fdfdf1"
    }
  ],
  "pinData": {
    "Webhook - Story Submitted": [
      {
        "json": {
          "headers": {
            "host": "mikelandin.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "content-length": "383",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "50.47.211.75",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "97048c4232ecb248-PDX",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://storiesofyou.ai",
            "priority": "u=1, i",
            "referer": "https://storiesofyou.ai/",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "50.47.211.75, 104.23.160.13",
            "x-forwarded-host": "mikelandin.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-59-5786bcf55-sms9c",
            "x-is-trusted": "yes",
            "x-real-ip": "50.47.211.75"
          },
          "params": {},
          "query": {},
          "body": {
            "name": "Mike",
            "email": "mikelandin@gmail.com",
            "prompt": "What was your childhood home like?",
            "audio_key": "21a5aeaa-5edf-422a-9ba8-a56b26d0f347/audio.webm",
            "photo_key": "22d21234-5300-4907-ba62-2204f02ac851/audio.jpg",
            "recorded_at": "2025-08-16T23:00:26.575Z",
            "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
          },
          "webhookUrl": "https://mikelandin.app.n8n.cloud/webhook/storiesofyou-submit",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook - Story Submitted": {
      "main": [
        [
          {
            "node": "Prepare Story Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Story Data": {
      "main": [
        [
          {
            "node": "Create Story in DynamoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Transcription": {
      "main": [
        [
          {
            "node": "Check AssemblyAI Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Transcription Complete?": {
      "main": [
        [
          {
            "node": "Toxicity Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait More",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait More": {
      "main": [
        [
          {
            "node": "Check AssemblyAI Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Story Clean? (Toxicity ≤ 0.5)": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update DynamoDB for Toxicity Fail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Story Page HTML": {
      "main": [
        [
          {
            "node": "Upload Story Page to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Story Page to S3": {
      "main": [
        [
          {
            "node": "Final Dynamo Update with Page URL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Story Email": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start AssemblyAI Transcription": {
      "main": [
        [
          {
            "node": "Update DynamoDB w Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AssemblyAI Status": {
      "main": [
        [
          {
            "node": "Is Transcription Complete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Toxicity Check": {
      "main": [
        [
          {
            "node": "Update Transcript in DynamoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Story in DynamoDB": {
      "main": [
        [
          {
            "node": "Close Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update DynamoDB w Status": {
      "main": [
        [
          {
            "node": "Wait for Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Transcript in DynamoDB": {
      "main": [
        [
          {
            "node": "Is Story Clean? (Toxicity ≤ 0.5)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Parse Claude JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Dynamo Update with Page URL": {
      "main": [
        [
          {
            "node": "Send Story Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update DynamoDB for Toxicity Fail": {
      "main": [
        []
      ]
    },
    "Replicate API Call": {
      "main": [
        [
          {
            "node": "Attempt Image Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attempt Image Download": {
      "main": [
        [
          {
            "node": "Upload AI Image 1 to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Did the Storyteller Provide a Photo?": {
      "main": [
        [],
        [
          {
            "node": "Replicate API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Claude JSON": {
      "main": [
        [
          {
            "node": "Generate Multiple AI Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Close Webhook": {
      "main": [
        [
          {
            "node": "Start AssemblyAI Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Music Selection": {
      "main": [
        [
          {
            "node": "Did the Storyteller Provide a Photo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Multiple AI Images": {
      "main": [
        [
          {
            "node": "Smart Music Selection",
            "type": "main",
            "index": 0
          },
          {
            "node": "Replicate API Call1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Replicate API Call2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replicate API Call1": {
      "main": [
        [
          {
            "node": "Attempt Image Download1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attempt Image Download1": {
      "main": [
        [
          {
            "node": "Upload AI Image 2 to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replicate API Call2": {
      "main": [
        [
          {
            "node": "Attempt Image Download2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attempt Image Download2": {
      "main": [
        [
          {
            "node": "Upload AI Image 3 to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS Lambda": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Aggregation": {
      "main": [
        [
          {
            "node": "AWS Lambda",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload AI Image 1 to S3": {
      "main": [
        [
          {
            "node": "Merge Photos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload AI Image 2 to S3": {
      "main": [
        [
          {
            "node": "Merge Photos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Upload AI Image 3 to S3": {
      "main": [
        [
          {
            "node": "Merge Photos",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Photos": {
      "main": [
        [
          {
            "node": "Image Aggregation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Generate Story Page HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "27be5679-2805-45c6-9f71-e2b2ec84d8c5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "915e9e153d2d5f26d2303ae9943268f5017ba8476548714beb1378374a62cdf2"
  },
  "id": "ksAiEAD39esIv3Po",
  "tags": []
}
