// Stories of You - FIXED Image Converter with Sharp
// FIXES: 1) AI image copying from generated-images to processed
//        2) Story info slide generation with proper text rendering
// REQUIRES: Sharp layer attached to Lambda function

const { S3Client, GetObjectCommand, PutObjectCommand, HeadObjectCommand, CopyObjectCommand } = require('@aws-sdk/client-s3');
const sharp = require('sharp'); // CRITICAL: Requires Sharp layer

const s3 = new S3Client({ region: 'us-east-2' });

exports.handler = async (event) => {
  console.log('Image Converter with Sharp - FIXED VERSION');
  console.log('Event:', JSON.stringify(event, null, 2));
  
  // CRITICAL: Handle story info slide generation
  if (event.action === 'generate_story_info_slide') {
    return await generateStoryInfoSlideWithSharp(event);
  }
  
  // MAIN: Process images for video generation
  const { 
    storyId,
    userPhotoKey,
    generatedImageKeys = [],
    testMode = false
  } = event;
  
  if (!storyId) {
    return {
      statusCode: 400,
      body: JSON.stringify({
        success: false,
        error: 'storyId is required'
      })
    };
  }
  
  try {
    const processedImages = [];
    const processingResults = [];
    
    // STEP 1: Process user photo if provided (JPEG to PNG conversion)
    if (userPhotoKey && userPhotoKey !== 'default-story-image.jpg') {
      console.log('Converting user photo JPEG to PNG:', userPhotoKey);
      
      try {
        const converted = await convertJPEGtoPNG(
          userPhotoKey, 
          `processed/${storyId}-user-photo.png`,
          'storiesofyou-incoming',
          'storiesofyou-stories'
        );
        
        if (converted) {
          const imageData = {
            type: 'user_photo',
            originalKey: userPhotoKey,
            processedKey: converted.key,
            processedUrl: converted.url,
            convertedKey: converted.key,  // CRITICAL: Field name compatibility
            convertedUrl: converted.url,  // CRITICAL: Field name compatibility
            duration: 3,
            description: 'User uploaded photo (converted to PNG)',
            format: 'png',
            sharpWorking: true
          };
          processedImages.push(imageData);
          processingResults.push({ status: 'success', image: imageData });
          console.log('User photo converted successfully to PNG');
        }
      } catch (error) {
        console.error('User photo conversion failed:', error);
        processingResults.push({ 
          status: 'failed', 
          originalKey: userPhotoKey, 
          error: error.message 
        });
      }
    }
    
    // STEP 2: Process AI-generated images (FIXED: ensure PNG format and copy to processed/)
    for (let i = 0; i < generatedImageKeys.length; i++) {
      const imageKey = generatedImageKeys[i];
      console.log(`Processing AI-generated image ${i + 1}:`, imageKey);
      
      try {
        const processed = await ensurePNGFormat(
          imageKey, 
          `processed/${storyId}-ai-image-${i + 1}.png`,
          'storiesofyou-stories'
        );
        
        if (processed) {
          const imageData = {
            type: 'ai_generated',
            originalKey: imageKey,
            processedKey: processed.key,
            processedUrl: processed.url,
            convertedKey: processed.key,  // CRITICAL: Field name compatibility
            convertedUrl: processed.url,  // CRITICAL: Field name compatibility
            duration: 2.5,
            description: `AI-generated illustration ${i + 1} (PNG format)`,
            format: 'png',
            sharpWorking: true
          };
          processedImages.push(imageData);
          processingResults.push({ status: 'success', image: imageData });
          console.log(`AI image ${i + 1} processed to PNG format`);
        }
      } catch (error) {
        console.error(`AI image ${i + 1} processing failed:`, error);
        processingResults.push({ 
          status: 'failed', 
          originalKey: imageKey, 
          error: error.message 
        });
      }
    }
    
    // STEP 3: Add logo fallback if no images processed
    if (processedImages.length === 0) {
      console.log('No images processed, will use brand logo as fallback');
      processedImages.push({
        type: 'brand_logo',
        originalKey: 'logo.png',
        processedKey: 'logo.png',
        processedUrl: 's3://storiesofyou-stories/logo.png',
        convertedKey: 'logo.png',  // CRITICAL: Field name compatibility
        convertedUrl: 's3://storiesofyou-stories/logo.png',  // CRITICAL: Field name compatibility
        duration: 4,
        description: 'Stories of You logo (PNG)',
        format: 'png',
        sharpWorking: true
      });
    }
    
    console.log(`Image processing complete: ${processedImages.length} PNG images ready for MediaConvert`);
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        storyId: storyId,
        processedImages: processedImages,
        convertedImages: processedImages,  // CRITICAL: Provide both field names for compatibility
        totalImages: processedImages.length,
        processingResults: processingResults,
        sharpWorking: true,
        message: `Successfully converted ${processedImages.length} images to PNG format for MediaConvert`,
        testMode: testMode,
        features: ['jpeg_to_png_conversion', 'sharp_text_rendering', 'mediaconvert_compatible']
      })
    };
    
  } catch (error) {
    console.error('Image processing failed:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        error: error.message,
        storyId: storyId,
        sharpWorking: false,
        testMode: testMode
      })
    };
  }
};

// FIXED: Generate story info slide with Sharp text rendering
async function generateStoryInfoSlideWithSharp(event) {
  try {
    const { storyId, storytellerName, prompt, outputKey } = event;
    
    console.log(`Generating story info slide with Sharp: ${storytellerName} - "${prompt}"`);
    
    if (!storyId || !storytellerName) {
      throw new Error('Missing required fields: storyId, storytellerName');
    }
    
    // Force PNG extension
    const pngOutputKey = outputKey ? outputKey.replace(/\.svg$/, '.png') : `story-info-slides/${storyId}-info.png`;
    
    // FIXED: Create story info slide using Sharp with proper text rendering
    const slideBuffer = await createStoryInfoSlideWithSharp(storytellerName, prompt);
    
    // Upload PNG to S3
    const uploadCommand = new PutObjectCommand({
      Bucket: 'storiesofyou-stories',
      Key: pngOutputKey,
      Body: slideBuffer,
      ContentType: 'image/png',
      ACL: 'public-read',
      Metadata: {
        'story-id': storyId,
        'storyteller': storytellerName,
        'prompt': prompt || 'A personal story',
        'generated-by': 'storiesofyou-image-converter-sharp',
        'generation-date': new Date().toISOString(),
        'format': 'png-with-sharp-text'
      }
    });
    
    await s3.send(uploadCommand);
    
    const slideUrl = `s3://storiesofyou-stories/${pngOutputKey}`;
    console.log('Story info slide generated with Sharp:', slideUrl);
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        action: 'generate_story_info_slide',
        storyInfoSlide: {
          outputKey: pngOutputKey,
          url: slideUrl,
          storytellerName: storytellerName,
          prompt: prompt,
          format: 'png',
          method: 'sharp_text_rendering'
        },
        sharpWorking: true
      })
    };
    
  } catch (error) {
    console.error('Story info slide generation failed:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        action: 'generate_story_info_slide',
        error: error.message,
        sharpWorking: false
      })
    };
  }
}

// FIXED: Create story info slide with Sharp - proper SVG-to-PNG rendering
async function createStoryInfoSlideWithSharp(storytellerName, prompt) {
  const width = 1920;
  const height = 1080;
  
  // Truncate long prompts for better display
  const displayPrompt = prompt && prompt.length > 60 ? prompt.substring(0, 57) + '...' : (prompt || 'A personal story');
  
  // FIXED: Create a complete SVG with proper text rendering
  const completeSvg = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient id="warmBg" cx="50%" cy="-20%" r="60%">
          <stop offset="0%" stop-color="#fff7e9"/>
          <stop offset="50%" stop-color="#fce8c8"/>
          <stop offset="100%" stop-color="#e0cba7"/>
        </radialGradient>
      </defs>
      
      <!-- Background -->
      <rect width="100%" height="100%" fill="url(#warmBg)"/>
      
      <!-- Stories of You Logo Area -->
      <g transform="translate(960, 280)">
        <!-- Microphone base -->
        <circle r="60" fill="#0f2c4c"/>
        <!-- Soundwave pattern -->
        <path d="M-40,-20 L-20,-20 L0,0 L20,-20 L40,-20 L20,0 L40,20 L20,20 L0,0 L-20,20 L-40,20 L-20,0 Z" fill="#e09a1b"/>
        <!-- Microphone stand -->
        <rect x="-2" y="35" width="4" height="25" fill="#0f2c4c"/>
        <!-- Microphone base -->
        <ellipse cx="0" cy="65" rx="15" ry="5" fill="#0f2c4c"/>
      </g>
      
      <!-- Brand Text -->
      <text x="960" y="400" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="72" font-weight="bold" fill="#0f2c4c">Stories of You</text>
      
      <!-- Divider Line -->
      <line x1="710" y1="480" x2="1210" y2="480" stroke="#e09a1b" stroke-width="4"/>
      
      <!-- Story Prompt in Quotes -->
      <text x="960" y="600" text-anchor="middle" font-family="Georgia, serif" font-size="58" font-style="italic" fill="#3d3528">"${displayPrompt}"</text>
      
      <!-- Decorative Elements -->
      <circle cx="760" cy="730" r="4" fill="#e09a1b"/>
      <circle cx="1160" cy="730" r="4" fill="#e09a1b"/>
      
      <!-- Storyteller Attribution -->
      <text x="960" y="750" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="36" font-weight="500" fill="#6b7280">A story by ${storytellerName || 'Someone'}</text>
    </svg>
  `;
  
  // FIXED: Use Sharp to properly render SVG to PNG
  const pngBuffer = await sharp(Buffer.from(completeSvg))
    .png({
      quality: 95,
      compressionLevel: 6,
      progressive: true
    })
    .toBuffer();
  
  console.log(`Story info slide created: ${pngBuffer.length} bytes`);
  return pngBuffer;
}

// FIXED: Convert JPEG to PNG using Sharp
async function convertJPEGtoPNG(sourceKey, targetKey, sourceBucket, targetBucket) {
  try {
    console.log(`Converting JPEG to PNG: ${sourceBucket}/${sourceKey} -> ${targetBucket}/${targetKey}`);
    
    // Download source image
    const getCommand = new GetObjectCommand({
      Bucket: sourceBucket,
      Key: sourceKey
    });
    
    const response = await s3.send(getCommand);
    const imageBuffer = await streamToBuffer(response.Body);
    
    // Convert to PNG using Sharp with optimization
    const pngBuffer = await sharp(imageBuffer)
      .png({
        quality: 90,
        compressionLevel: 6,
        progressive: true
      })
      .resize({
        width: 1920,
        height: 1080,
        fit: 'inside',
        withoutEnlargement: true
      })
      .toBuffer();
    
    // Upload converted PNG
    const putCommand = new PutObjectCommand({
      Bucket: targetBucket,
      Key: targetKey,
      Body: pngBuffer,
      ContentType: 'image/png',
      ACL: 'public-read',
      Metadata: {
        'original-key': sourceKey,
        'original-bucket': sourceBucket,
        'converted-by': 'storiesofyou-image-converter-sharp',
        'conversion-date': new Date().toISOString(),
        'original-format': 'jpeg',
        'target-format': 'png'
      }
    });
    
    await s3.send(putCommand);
    
    const convertedUrl = `s3://${targetBucket}/${targetKey}`;
    console.log('JPEG to PNG conversion successful:', convertedUrl);
    
    return {
      key: targetKey,
      url: convertedUrl,
      format: 'png',
      conversionMethod: 'sharp',
      originalSize: imageBuffer.length,
      convertedSize: pngBuffer.length
    };
    
  } catch (error) {
    console.error('JPEG to PNG conversion failed:', error);
    throw error;
  }
}

// FIXED: Ensure image is in PNG format and copy to processed folder
async function ensurePNGFormat(sourceKey, targetKey, bucket) {
  try {
    // Check if source file exists first
    try {
      const headCommand = new HeadObjectCommand({
        Bucket: bucket,
        Key: sourceKey
      });
      await s3.send(headCommand);
      console.log(`Source file exists: ${sourceKey}`);
    } catch (error) {
      if (error.name === 'NotFound') {
        throw new Error(`Source image not found: ${bucket}/${sourceKey}`);
      }
      throw error;
    }
    
    // Check if already PNG
    if (sourceKey.toLowerCase().endsWith('.png')) {
      console.log(`Image already PNG format: ${sourceKey}, copying to processed folder`);
      
      // FIXED: Use CopyObjectCommand instead of PutObjectCommand
      const copyCommand = new CopyObjectCommand({
        CopySource: `${bucket}/${sourceKey}`,
        Bucket: bucket,
        Key: targetKey,
        ACL: 'public-read',
        MetadataDirective: 'REPLACE',
        Metadata: {
          'original-key': sourceKey,
          'processed-by': 'storiesofyou-image-converter-sharp',
          'processing-date': new Date().toISOString(),
          'format': 'png'
        }
      });
      
      await s3.send(copyCommand);
      console.log(`PNG file copied successfully: ${bucket}/${sourceKey} -> ${bucket}/${targetKey}`);
      
      return {
        key: targetKey,
        url: `s3://${bucket}/${targetKey}`,
        format: 'png',
        method: 'copied_png'
      };
    } else {
      // Convert other formats to PNG
      console.log(`Converting non-PNG format to PNG: ${sourceKey}`);
      return await convertJPEGtoPNG(sourceKey, targetKey, bucket, bucket);
    }
    
  } catch (error) {
    console.error('PNG format conversion failed:', error);
    throw error;
  }
}

// Helper function to convert stream to buffer
async function streamToBuffer(stream) {
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on('data', chunk => chunks.push(chunk));
    stream.on('error', reject);
    stream.on('end', () => resolve(Buffer.concat(chunks)));
  });
}

// Health check function
exports.healthCheck = async () => {
  try {
    // Test Sharp functionality
    const testBuffer = await sharp({
      create: {
        width: 100,
        height: 100,
        channels: 3,
        background: { r: 255, g: 255, b: 255 }
      }
    })
    .png()
    .toBuffer();
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: 'Image converter with Sharp is healthy and ready',
        sharpWorking: true,
        testImageSize: testBuffer.length,
        features: [
          'jpeg_to_png_conversion',
          'story_info_slide_generation',
          'sharp_text_rendering',
          'image_optimization',
          'mediaconvert_compatible'
        ]
      })
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        message: 'Sharp layer not working properly',
        sharpWorking: false,
        error: error.message
      })
    };
  }
};
