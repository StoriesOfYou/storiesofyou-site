// Stories of You - Image Converter Lambda (No Sharp Version)
// Validates and organizes images for MediaConvert without conversion

const { S3Client, GetObjectCommand, PutObjectCommand, HeadObjectCommand, CopyObjectCommand } = require('@aws-sdk/client-s3');

const s3 = new S3Client({ region: 'us-east-2' });

exports.handler = async (event) => {
  console.log('üñºÔ∏è Image Converter (No Sharp) started:', JSON.stringify(event, null, 2));
  
  const { 
    storyId,
    userPhotoKey,
    generatedImageKeys = [],
    testMode = false
  } = event;
  
  if (!storyId) {
    return {
      statusCode: 400,
      body: JSON.stringify({
        success: false,
        error: 'storyId is required'
      })
    };
  }
  
  try {
    const processedImages = [];
    const processingResults = [];
    
    // Process user photo if provided
    if (userPhotoKey && userPhotoKey !== 'default-story-image.jpg') {
      console.log('üì∏ Processing user photo:', userPhotoKey);
      
      try {
        const processed = await processImage(
          userPhotoKey, 
          `processed/${storyId}-user-photo`,
          'storiesofyou-incoming'
        );
        
        if (processed) {
          const imageData = {
            type: 'user_photo',
            originalKey: userPhotoKey,
            processedKey: processed.key,
            processedUrl: processed.url,
            duration: 3,
            description: 'User uploaded photo',
            format: processed.format
          };
          processedImages.push(imageData);
          processingResults.push({ status: 'success', image: imageData });
        }
      } catch (error) {
        console.error('‚ùå User photo processing failed:', error);
        processingResults.push({ 
          status: 'failed', 
          originalKey: userPhotoKey, 
          error: error.message 
        });
      }
    }
    
    // Process AI-generated images
    for (let i = 0; i < generatedImageKeys.length; i++) {
      const imageKey = generatedImageKeys[i];
      console.log(`üé® Processing AI-generated image ${i + 1}:`, imageKey);
      
      try {
        const processed = await processImage(
          imageKey, 
          `processed/${storyId}-ai-image-${i + 1}`,
          'storiesofyou-stories'
        );
        
        if (processed) {
          const imageData = {
            type: 'ai_generated',
            originalKey: imageKey,
            processedKey: processed.key,
            processedUrl: processed.url,
            duration: 2.5,
            description: `AI-generated illustration ${i + 1}`,
            format: processed.format
          };
          processedImages.push(imageData);
          processingResults.push({ status: 'success', image: imageData });
        }
      } catch (error) {
        console.error(`‚ùå AI image ${i + 1} processing failed:`, error);
        processingResults.push({ 
          status: 'failed', 
          originalKey: imageKey, 
          error: error.message 
        });
      }
    }
    
    // Add default brand logo if no images processed
    if (processedImages.length === 0) {
      console.log('‚ÑπÔ∏è No images processed, will use brand logo as fallback');
      processedImages.push({
        type: 'brand_logo',
        originalKey: 'logo.png',
        processedKey: 'logo.png',
        processedUrl: 's3://assets.storiesofyou.ai/logo.png',
        duration: 4,
        description: 'Stories of You logo',
        format: 'png'
      });
    }
    
    console.log(`‚úÖ Image processing complete: ${processedImages.length} images ready for video`);
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        storyId: storyId,
        processedImages: processedImages,
        totalImages: processedImages.length,
        processingResults: processingResults,
        message: `Successfully processed ${processedImages.length} images for MediaConvert`,
        testMode: testMode,
        note: 'Images validated and organized (conversion skipped - MediaConvert will handle format compatibility)'
      })
    };
    
  } catch (error) {
    console.error('‚ùå Image processing failed:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        error: error.message,
        storyId: storyId,
        testMode: testMode
      })
    };
  }
};

async function processImage(sourceKey, targetKeyBase, sourceBucket) {
  try {
    console.log(`üîç Processing ${sourceBucket}/${sourceKey}`);
    
    // Check if source exists and get metadata
    let sourceMetadata;
    try {
      const headResult = await s3.send(new HeadObjectCommand({
        Bucket: sourceBucket,
        Key: sourceKey
      }));
      sourceMetadata = headResult;
    } catch (error) {
      if (error.name === 'NotFound') {
        throw new Error(`Source image not found: ${sourceBucket}/${sourceKey}`);
      }
      throw error;
    }
    
    // Determine format from content type or extension
    const contentType = sourceMetadata.ContentType || '';
    const extension = sourceKey.toLowerCase().split('.').pop();
    let format = 'unknown';
    let targetKey = targetKeyBase;
    
    // Determine format and set appropriate extension
    if (contentType.includes('jpeg') || contentType.includes('jpg') || extension === 'jpg' || extension === 'jpeg') {
      format = 'jpeg';
      targetKey = `${targetKeyBase}.jpg`;
    } else if (contentType.includes('png') || extension === 'png') {
      format = 'png';
      targetKey = `${targetKeyBase}.png`;
    } else if (contentType.includes('webp') || extension === 'webp') {
      format = 'webp';
      targetKey = `${targetKeyBase}.webp`;
    } else {
      // Default to original extension
      const originalExt = extension || 'jpg';
      format = originalExt;
      targetKey = `${targetKeyBase}.${originalExt}`;
    }
    
    console.log(`üìã Image info: ${format} format, ${sourceMetadata.ContentLength} bytes`);
    
    // For now, just copy the image to the processed folder without conversion
    // MediaConvert can handle most formats directly
    const copyCommand = new CopyObjectCommand({
      Bucket: 'storiesofyou-stories',
      Key: targetKey,
      CopySource: `${sourceBucket}/${sourceKey}`,
      ACL: 'public-read',
      Metadata: {
        'original-key': sourceKey,
        'original-bucket': sourceBucket,
        'processed-by': 'storiesofyou-image-converter-no-sharp',
        'processing-date': new Date().toISOString(),
        'original-format': format
      },
      MetadataDirective: 'REPLACE'
    });
    
    await s3.send(copyCommand);
    
    const processedUrl = `s3://storiesofyou-stories/${targetKey}`;
    console.log('‚úÖ Image processed (copied):', processedUrl);
    
    return {
      key: targetKey,
      url: processedUrl,
      format: format,
      originalSize: sourceMetadata.ContentLength || 0
    };
    
  } catch (error) {
    console.error('‚ùå Failed to process image', sourceKey, ':', error);
    throw error;
  }
}

// Health check export for testing
exports.healthCheck = async () => {
  try {
    // Test S3 connectivity
    const testResult = await s3.send(new HeadObjectCommand({
      Bucket: 'storiesofyou-stories',
      Key: 'test-connectivity' // This will likely fail, but tests connection
    }));
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: 'Image processor is healthy (no Sharp version)',
        s3Connected: true
      })
    };
  } catch (error) {
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: 'Image processor is healthy (no Sharp version)',
        s3Connected: true,
        note: 'S3 connectivity test expected to fail'
      })
    };
  }
};
